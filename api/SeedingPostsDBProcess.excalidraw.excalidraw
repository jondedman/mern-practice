{
	"type": "excalidraw",
	"version": 2,
	"source": "https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.12.2",
	"elements": [
		{
			"id": "NC6h2FYx",
			"type": "text",
			"x": -464.93891200069527,
			"y": -326.87938434755586,
			"width": 589.2311401367188,
			"height": 1959.8066603535365,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a0",
			"roundness": null,
			"seed": 2035447657,
			"version": 180,
			"versionNonce": 531208201,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427944377,
			"link": null,
			"locked": false,
			"text": "const mongoose = require(\"mongoose\");\nconst User = require(\"./models/user\");\nrequire(\"dotenv\").config();\n\nasync function connectToDatabase() {\n    const mongoDbUrl = process.env.MONGODB_URL;\n\n    if (!mongoDbUrl) {\n    console.error(\n    \"No MongoDB url provided. Make sure there is a MONGODB_URL \n        environment variable set. See the README for more details.\"\n    );\n    throw new Error(\"No connection string provided\");\n    }\n\n    await mongoose.connect(mongoDbUrl);\n\n    if (process.env.NODE_ENV !== \"test\") {\n    console.log(process.env.NODE_ENV)\n    console.log(\"Successfully connected to MongoDB\");\n    }\n}\nconst superVillains = [\n    {\n    fullname: \"Darth Vader\",\n    email: \"darth@deathstar.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Thanos Titan\",\n    email: \"thanos@infinitygauntlet.org\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Lex Luthor\",\n    email: \"lex@luthorcorp.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Harley Quinn\",\n    email: \"harley@arkham.org\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Green Goblin\",\n    email: \"norman@oscorp.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Magneto Erik\",\n    email: \"magneto@genosha.mutants\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Doctor Doom\",\n    email: \"doom@latveria.gov\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Joker Unknown\",\n    email: \"joker@arkhamasylum.net\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Hela Odinsdottir\",\n    email: \"hela@helheim.asgard\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Voldemort Riddle\",\n    email: \"tom@darkarts.uk\",\n    password: \"password123\"\n    }\n];\n\nconst dbSeed = async () => {\n    await connectToDatabase();\n    try {\n        await User.deleteMany({});  \n        for (const villain of superVillains) {\n            const user = new User({\n            fullname: villain.fullname,\n            email: villain.email,\n            password: villain.password\n        });\n        await user.save();\n    }\n    await mongoose.disconnect();\n    process.exit(0);\n    } catch (error) {\n        console.log(\"Error:\", error)\n    }\n    console.log(\"Users created\")\n    process.exit(1);\n}\n\ndbSeed();\n",
			"rawText": "const mongoose = require(\"mongoose\");\nconst User = require(\"./models/user\");\nrequire(\"dotenv\").config();\n\nasync function connectToDatabase() {\n    const mongoDbUrl = process.env.MONGODB_URL;\n\n    if (!mongoDbUrl) {\n    console.error(\n    \"No MongoDB url provided. Make sure there is a MONGODB_URL \n        environment variable set. See the README for more details.\"\n    );\n    throw new Error(\"No connection string provided\");\n    }\n\n    await mongoose.connect(mongoDbUrl);\n\n    if (process.env.NODE_ENV !== \"test\") {\n    console.log(process.env.NODE_ENV)\n    console.log(\"Successfully connected to MongoDB\");\n    }\n}\nconst superVillains = [\n    {\n    fullname: \"Darth Vader\",\n    email: \"darth@deathstar.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Thanos Titan\",\n    email: \"thanos@infinitygauntlet.org\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Lex Luthor\",\n    email: \"lex@luthorcorp.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Harley Quinn\",\n    email: \"harley@arkham.org\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Green Goblin\",\n    email: \"norman@oscorp.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Magneto Erik\",\n    email: \"magneto@genosha.mutants\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Doctor Doom\",\n    email: \"doom@latveria.gov\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Joker Unknown\",\n    email: \"joker@arkhamasylum.net\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Hela Odinsdottir\",\n    email: \"hela@helheim.asgard\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Voldemort Riddle\",\n    email: \"tom@darkarts.uk\",\n    password: \"password123\"\n    }\n];\n\nconst dbSeed = async () => {\n    await connectToDatabase();\n    try {\n        await User.deleteMany({});  \n        for (const villain of superVillains) {\n            const user = new User({\n            fullname: villain.fullname,\n            email: villain.email,\n            password: villain.password\n        });\n        await user.save();\n    }\n    await mongoose.disconnect();\n    process.exit(0);\n    } catch (error) {\n        console.log(\"Error:\", error)\n    }\n    console.log(\"Users created\")\n    process.exit(1);\n}\n\ndbSeed();\n",
			"fontSize": 15.998421717171727,
			"fontFamily": 8,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "const mongoose = require(\"mongoose\");\nconst User = require(\"./models/user\");\nrequire(\"dotenv\").config();\n\nasync function connectToDatabase() {\n    const mongoDbUrl = process.env.MONGODB_URL;\n\n    if (!mongoDbUrl) {\n    console.error(\n    \"No MongoDB url provided. Make sure there is a MONGODB_URL \n        environment variable set. See the README for more details.\"\n    );\n    throw new Error(\"No connection string provided\");\n    }\n\n    await mongoose.connect(mongoDbUrl);\n\n    if (process.env.NODE_ENV !== \"test\") {\n    console.log(process.env.NODE_ENV)\n    console.log(\"Successfully connected to MongoDB\");\n    }\n}\nconst superVillains = [\n    {\n    fullname: \"Darth Vader\",\n    email: \"darth@deathstar.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Thanos Titan\",\n    email: \"thanos@infinitygauntlet.org\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Lex Luthor\",\n    email: \"lex@luthorcorp.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Harley Quinn\",\n    email: \"harley@arkham.org\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Green Goblin\",\n    email: \"norman@oscorp.com\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Magneto Erik\",\n    email: \"magneto@genosha.mutants\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Doctor Doom\",\n    email: \"doom@latveria.gov\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Joker Unknown\",\n    email: \"joker@arkhamasylum.net\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Hela Odinsdottir\",\n    email: \"hela@helheim.asgard\",\n    password: \"password123\"\n    },\n    {\n    fullname: \"Voldemort Riddle\",\n    email: \"tom@darkarts.uk\",\n    password: \"password123\"\n    }\n];\n\nconst dbSeed = async () => {\n    await connectToDatabase();\n    try {\n        await User.deleteMany({});  \n        for (const villain of superVillains) {\n            const user = new User({\n            fullname: villain.fullname,\n            email: villain.email,\n            password: villain.password\n        });\n        await user.save();\n    }\n    await mongoose.disconnect();\n    process.exit(0);\n    } catch (error) {\n        console.log(\"Error:\", error)\n    }\n    console.log(\"Users created\")\n    process.exit(1);\n}\n\ndbSeed();\n",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "i7blnUFWOLkLuk2T73FTH",
			"type": "rectangle",
			"x": -507.73423365783935,
			"y": -353.710044269646,
			"width": 890.2337862974902,
			"height": 2038.1693804147892,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a1",
			"roundness": {
				"type": 3
			},
			"seed": 2024820201,
			"version": 165,
			"versionNonce": 1491851239,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "EkUlTtcLs6oE9dmR6cWkk",
					"type": "arrow"
				}
			],
			"updated": 1755423713164,
			"link": null,
			"locked": false
		},
		{
			"id": "CEgLcNoEFQPcyDZrVt8YS",
			"type": "rectangle",
			"x": -476.9659880768288,
			"y": -328.2864692280146,
			"width": 357.73557870277136,
			"height": 68.77873422674361,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a2",
			"roundness": {
				"type": 3
			},
			"seed": 1672157097,
			"version": 90,
			"versionNonce": 1927871687,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "EkUlTtcLs6oE9dmR6cWkk",
					"type": "arrow"
				},
				{
					"id": "uzMenyXorPuI7cV5k-boX",
					"type": "arrow"
				},
				{
					"id": "NBwStVy-aP5Xrr9WNhIAx",
					"type": "arrow"
				}
			],
			"updated": 1755423537905,
			"link": null,
			"locked": false
		},
		{
			"id": "UnrybPf6",
			"type": "text",
			"x": -54.428387921354215,
			"y": -312.04701660237225,
			"width": 190.15988159179688,
			"height": 25,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a3",
			"roundness": null,
			"seed": 74524455,
			"version": 63,
			"versionNonce": 1486608807,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427734910,
			"link": null,
			"locked": false,
			"text": "Imports and setup ",
			"rawText": "Imports and setup ",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Imports and setup ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "4oU33761lkmUu6haz5aiv",
			"type": "line",
			"x": -317.7810073114988,
			"y": -307.1396307361863,
			"width": 169.49944957532807,
			"height": 1.9854427636260539,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a4",
			"roundness": {
				"type": 2
			},
			"seed": 1690352329,
			"version": 29,
			"versionNonce": 1062902279,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423437784,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					169.49944957532807,
					-1.9854427636260539
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": null,
			"polygon": false
		},
		{
			"id": "EkUlTtcLs6oE9dmR6cWkk",
			"type": "arrow",
			"x": -159.22642803685994,
			"y": -325.33329871642184,
			"width": 11.38808293648458,
			"height": 132.04438206495462,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a5",
			"roundness": {
				"type": 2
			},
			"seed": 958906663,
			"version": 65,
			"versionNonce": 1445488713,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423464241,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					11.38808293648458,
					-132.04438206495462
				]
			],
			"lastCommittedPoint": [
				47.94399422594279,
				-99.62799016483581
			],
			"startBinding": {
				"elementId": "CEgLcNoEFQPcyDZrVt8YS",
				"focus": 0.7488193464608173,
				"gap": 2.9531705115927593
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "9bGiLJAA",
			"type": "text",
			"x": -143.78633269604825,
			"y": -485.78578450312415,
			"width": 648.859619140625,
			"height": 25,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a6",
			"roundness": null,
			"seed": 1245765863,
			"version": 105,
			"versionNonce": 619616007,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423464367,
			"link": null,
			"locked": false,
			"text": "mongoose is a library that connects your Node.js app to MongoDB",
			"rawText": "mongoose is a library that connects your Node.js app to MongoDB",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "mongoose is a library that connects your Node.js app to MongoDB",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "YKaNKqas90QG5tuLzotp1",
			"type": "line",
			"x": -466.41446021044294,
			"y": -288.61507513971316,
			"width": 328.4845983360881,
			"height": 1.7606756583099354,
			"angle": 0,
			"strokeColor": "#6741d9",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a7",
			"roundness": {
				"type": 2
			},
			"seed": 226214215,
			"version": 65,
			"versionNonce": 444020393,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423485035,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					328.4845983360881,
					1.7606756583099354
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": null,
			"polygon": false
		},
		{
			"id": "uzMenyXorPuI7cV5k-boX",
			"type": "arrow",
			"x": -475.47386228289156,
			"y": -297.9429100103336,
			"width": 122.5417380901605,
			"height": 5.282026974929636,
			"angle": 0,
			"strokeColor": "#6741d9",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a8",
			"roundness": {
				"type": 2
			},
			"seed": 562854281,
			"version": 27,
			"versionNonce": 1135470025,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423489669,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-122.5417380901605,
					-5.282026974929636
				]
			],
			"lastCommittedPoint": [
				-122.5417380901605,
				-5.282026974929636
			],
			"startBinding": {
				"elementId": "CEgLcNoEFQPcyDZrVt8YS",
				"focus": -0.08550683833603509,
				"gap": 1.492125793937248
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "V7GLzYms",
			"type": "text",
			"x": -924.0964784104648,
			"y": -335.1418659401574,
			"width": 316.73974609375,
			"height": 75,
			"angle": 0,
			"strokeColor": "#6741d9",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "a9",
			"roundness": null,
			"seed": 1569001863,
			"version": 152,
			"versionNonce": 1738603655,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423520916,
			"link": null,
			"locked": false,
			"text": "User: A Mongoose model \nrepresenting the users collection\n(defined in models/user.js)",
			"rawText": "User: A Mongoose model \nrepresenting the users collection\n(defined in models/user.js)",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "User: A Mongoose model \nrepresenting the users collection\n(defined in models/user.js)",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "hMF4zceKRyiaFobfMh__A",
			"type": "line",
			"x": -230.09678407125125,
			"y": -268.186203656689,
			"width": 237.95976373620715,
			"height": 2.9594335533293474,
			"angle": 0,
			"strokeColor": "#846358",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aA",
			"roundness": {
				"type": 2
			},
			"seed": 311897385,
			"version": 47,
			"versionNonce": 2000576967,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423533365,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-237.95976373620715,
					2.9594335533293474
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": null,
			"polygon": false
		},
		{
			"id": "NBwStVy-aP5Xrr9WNhIAx",
			"type": "arrow",
			"x": -475.23656909410215,
			"y": -275.0291328184587,
			"width": 209.0583430447706,
			"height": 73.19915396462795,
			"angle": 0,
			"strokeColor": "#846358",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aB",
			"roundness": {
				"type": 2
			},
			"seed": 415011047,
			"version": 43,
			"versionNonce": 1115867559,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423537905,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-209.0583430447706,
					73.19915396462795
				]
			],
			"lastCommittedPoint": [
				-209.0583430447706,
				73.19915396462795
			],
			"startBinding": {
				"elementId": "CEgLcNoEFQPcyDZrVt8YS",
				"focus": 0.44481385254132805,
				"gap": 1.68414677170821
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "GdTjWctP",
			"type": "text",
			"x": -1097.4541958279858,
			"y": -218.08813280503273,
			"width": 403.2597351074219,
			"height": 50,
			"angle": 0,
			"strokeColor": "#846358",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aC",
			"roundness": null,
			"seed": 587500041,
			"version": 146,
			"versionNonce": 1694202025,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423568917,
			"link": null,
			"locked": false,
			"text": "dotenv: loads environment variables from \na .env file (like your MongoDB URL) ",
			"rawText": "dotenv: loads environment variables from \na .env file (like your MongoDB URL) ",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "dotenv: loads environment variables from \na .env file (like your MongoDB URL) ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "_3JifVR-Nln3xFgt_mf2i",
			"type": "rectangle",
			"x": -440.4476550377906,
			"y": -194.89965977324925,
			"width": 576.9146459954054,
			"height": 299.8767211428707,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aD",
			"roundness": {
				"type": 3
			},
			"seed": 1828061159,
			"version": 184,
			"versionNonce": 553928647,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "LhExDRfMeUi9aTFZwg0-f",
					"type": "arrow"
				}
			],
			"updated": 1755423718331,
			"link": null,
			"locked": false
		},
		{
			"id": "O7CYAs71",
			"type": "text",
			"x": 439.1346288579282,
			"y": -230.21314747483234,
			"width": 520.5996704101562,
			"height": 50,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aE",
			"roundness": null,
			"seed": 789959303,
			"version": 154,
			"versionNonce": 827593417,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "LhExDRfMeUi9aTFZwg0-f",
					"type": "arrow"
				},
				{
					"id": "IlDGRiM1y5C69pYwOA3Zu",
					"type": "arrow"
				}
			],
			"updated": 1755427792471,
			"link": null,
			"locked": false,
			"text": "Gets the MongoDB URL from an environment variable\n(MONGODB_URL)",
			"rawText": "Gets the MongoDB URL from an environment variable\n(MONGODB_URL)",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Gets the MongoDB URL from an environment variable\n(MONGODB_URL)",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "LhExDRfMeUi9aTFZwg0-f",
			"type": "arrow",
			"x": 160.9607877994511,
			"y": -148.9426315954867,
			"width": 264.1738410584771,
			"height": 54.17434690922559,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aF",
			"roundness": {
				"type": 2
			},
			"seed": 1529079433,
			"version": 81,
			"versionNonce": 263558855,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423744697,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					264.1738410584771,
					-54.17434690922559
				]
			],
			"lastCommittedPoint": [
				277.7308982274926,
				-59.48209749860587
			],
			"startBinding": {
				"elementId": "_3JifVR-Nln3xFgt_mf2i",
				"focus": -0.19062350123429272,
				"gap": 28.101975606955193
			},
			"endBinding": {
				"elementId": "O7CYAs71",
				"focus": 0.6910543782772799,
				"gap": 14
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "PXCMja37",
			"type": "text",
			"x": 445.127621676166,
			"y": -140.4319815350608,
			"width": 362.43975830078125,
			"height": 25,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aG",
			"roundness": null,
			"seed": 1846725865,
			"version": 265,
			"versionNonce": 1939493895,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "3abMcjMw1Sn3xe92e_Fe6",
					"type": "arrow"
				},
				{
					"id": "DJf4f5E6SqBlU2yjSYgiQ",
					"type": "arrow"
				}
			],
			"updated": 1755427796879,
			"link": null,
			"locked": false,
			"text": "If it's not found, it throws an error ",
			"rawText": "If it's not found, it throws an error ",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "If it's not found, it throws an error ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "3abMcjMw1Sn3xe92e_Fe6",
			"type": "arrow",
			"x": 4.416316584373362,
			"y": -77.92713162284588,
			"width": 425.8526547632405,
			"height": 50.784839717977775,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aH",
			"roundness": {
				"type": 2
			},
			"seed": 1992731655,
			"version": 49,
			"versionNonce": 488508967,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423751472,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					425.8526547632405,
					-50.784839717977775
				]
			],
			"lastCommittedPoint": [
				425.8526547632405,
				-50.784839717977775
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "PXCMja37",
				"focus": 0.7083648455225062,
				"gap": 14.85865032855213
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "uAdn5Zxt",
			"type": "text",
			"x": 452.70213325257487,
			"y": -76.49113907213712,
			"width": 453.51971435546875,
			"height": 25,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aI",
			"roundness": null,
			"seed": 240770889,
			"version": 96,
			"versionNonce": 610109193,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "1QpZtMiPuvByNQE8XTTkG",
					"type": "arrow"
				}
			],
			"updated": 1755427805247,
			"link": null,
			"locked": false,
			"text": "Connects to the DB using mongoose.connect()",
			"rawText": "Connects to the DB using mongoose.connect()",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Connects to the DB using mongoose.connect()",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "G9BBpZ5h8i-T2eeIacf11",
			"type": "arrow",
			"x": -115.43442075062967,
			"y": -19.269121643965605,
			"width": 544.1735709876855,
			"height": 35.93153870810215,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aJ",
			"roundness": {
				"type": 2
			},
			"seed": 727458599,
			"version": 70,
			"versionNonce": 86051689,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423780679,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					544.1735709876855,
					-35.93153870810215
				]
			],
			"lastCommittedPoint": [
				544.1735709876855,
				-35.93153870810215
			],
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "z1xAuRJQ",
			"type": "text",
			"x": 460.42522464419835,
			"y": -0.9631286441722295,
			"width": 602.03955078125,
			"height": 25,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aK",
			"roundness": null,
			"seed": 855770409,
			"version": 146,
			"versionNonce": 1037228521,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "ecsV-9D1wepmi90BGnmhd",
					"type": "arrow"
				}
			],
			"updated": 1755427811814,
			"link": null,
			"locked": false,
			"text": "Logs a success message unless you're in the test environment",
			"rawText": "Logs a success message unless you're in the test environment",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Logs a success message unless you're in the test environment",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "-WsGeGPFuE8EyfdvoNWao",
			"type": "arrow",
			"x": -77.82956649027165,
			"y": 39.30142011791929,
			"width": 513.0309178841253,
			"height": 29.98767796759705,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aL",
			"roundness": {
				"type": 2
			},
			"seed": 1911883721,
			"version": 67,
			"versionNonce": 2107442569,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423822032,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					513.0309178841253,
					-29.98767796759705
				]
			],
			"lastCommittedPoint": [
				513.0309178841253,
				-29.98767796759705
			],
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "HuTTwzVn",
			"type": "text",
			"x": 439.5406060582584,
			"y": -274.83555628493764,
			"width": 303.33978271484375,
			"height": 25,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aM",
			"roundness": null,
			"seed": 912878823,
			"version": 114,
			"versionNonce": 469237833,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423854667,
			"link": null,
			"locked": false,
			"text": "Database Connection Function:",
			"rawText": "Database Connection Function:",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Database Connection Function:",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "KAOzrH9hoiZniUoAXoXJ5",
			"type": "rectangle",
			"x": -472.9763803411141,
			"y": 103.94690594882263,
			"width": 363.9416091997117,
			"height": 1057.9350990302887,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aN",
			"roundness": {
				"type": 3
			},
			"seed": 153779975,
			"version": 127,
			"versionNonce": 112426793,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "vr3Ty24O3WG6sYJ8d-SlH",
					"type": "arrow"
				}
			],
			"updated": 1755423882918,
			"link": null,
			"locked": false
		},
		{
			"id": "vr3Ty24O3WG6sYJ8d-SlH",
			"type": "arrow",
			"x": -104.87654092503658,
			"y": 182.3843835707321,
			"width": 564.259087304099,
			"height": 9.433955381541864,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aO",
			"roundness": {
				"type": 2
			},
			"seed": 225083367,
			"version": 60,
			"versionNonce": 1685483593,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423882918,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					564.259087304099,
					-9.433955381541864
				]
			],
			"lastCommittedPoint": [
				564.259087304099,
				-9.433955381541864
			],
			"startBinding": {
				"elementId": "KAOzrH9hoiZniUoAXoXJ5",
				"focus": -0.840995815134477,
				"gap": 4.158230216365837
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "aF60HULJ",
			"type": "text",
			"x": 494.021576739942,
			"y": 159.8452767541512,
			"width": 516.19970703125,
			"height": 175,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aP",
			"roundness": null,
			"seed": 1171949801,
			"version": 228,
			"versionNonce": 1302581127,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423943607,
			"link": null,
			"locked": false,
			"text": "Seed Data: The Supervillains \n\nAn array of 10 fictional user objects, \neach with a name, email and password\n\nThese will be used to populate your users collection \nin MongoDB",
			"rawText": "Seed Data: The Supervillains \n\nAn array of 10 fictional user objects, \neach with a name, email and password\n\nThese will be used to populate your users collection \nin MongoDB",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Seed Data: The Supervillains \n\nAn array of 10 fictional user objects, \neach with a name, email and password\n\nThese will be used to populate your users collection \nin MongoDB",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "tlsXMJel",
			"type": "text",
			"x": 441.6322666339231,
			"y": 1199.080967666664,
			"width": 208.31988525390625,
			"height": 25,
			"angle": 0,
			"strokeColor": "#da77f2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aR",
			"roundness": null,
			"seed": 1416752265,
			"version": 209,
			"versionNonce": 590463879,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "VTi9FroTc2UwIT5J-fBt3",
					"type": "arrow"
				},
				{
					"id": "MlQuFYOgZ7UpLpg6cSuTu",
					"type": "arrow"
				}
			],
			"updated": 1755427896494,
			"link": null,
			"locked": false,
			"text": "Connect to MongoDB",
			"rawText": "Connect to MongoDB",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Connect to MongoDB",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "6tFnnHd2I6KyjlWhpE63N",
			"type": "line",
			"x": -430.36436158977665,
			"y": 1212.048741915199,
			"width": 226.6152294263776,
			"height": 0.34347223281133665,
			"angle": 0,
			"strokeColor": "#da77f2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aS",
			"roundness": {
				"type": 2
			},
			"seed": 507464425,
			"version": 42,
			"versionNonce": 1785079625,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755423996728,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					226.6152294263776,
					-0.34347223281133665
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": null,
			"polygon": false
		},
		{
			"id": "ihas2BXK",
			"type": "text",
			"x": 442.2876032253603,
			"y": 1246.0070712776467,
			"width": 273.759765625,
			"height": 25,
			"angle": 0,
			"strokeColor": "#9c36b5",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aT",
			"roundness": null,
			"seed": 2027530505,
			"version": 254,
			"versionNonce": 1676726919,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "OjopWKgzWNDFfPEKZR5co",
					"type": "arrow"
				},
				{
					"id": "BAWeaYrCTpCHa5C0PXWml",
					"type": "arrow"
				}
			],
			"updated": 1755427917658,
			"link": null,
			"locked": false,
			"text": "Clear out any existing users",
			"rawText": "Clear out any existing users",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Clear out any existing users",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "EelJCGv3izNXkHCyqKYdj",
			"type": "line",
			"x": -397.7339135185174,
			"y": 1252.2898628045637,
			"width": 210.9377238305757,
			"height": 0.9177990133741787,
			"angle": 0,
			"strokeColor": "#9c36b5",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aU",
			"roundness": {
				"type": 2
			},
			"seed": 1538694887,
			"version": 73,
			"versionNonce": 1079336713,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427926959,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					210.9377238305757,
					0.9177990133741787
				]
			],
			"lastCommittedPoint": [
				210.9377238305757,
				0.9177990133741787
			],
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": null,
			"polygon": false
		},
		{
			"id": "VTi9FroTc2UwIT5J-fBt3",
			"type": "arrow",
			"x": -193.3785886432729,
			"y": 1201.4909316230676,
			"width": 611.8472002799579,
			"height": 6.967780264800922,
			"angle": 0,
			"strokeColor": "#da77f2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aV",
			"roundness": {
				"type": 2
			},
			"seed": 1751581897,
			"version": 59,
			"versionNonce": 1703939849,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424063770,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					611.8472002799579,
					6.967780264800922
				]
			],
			"lastCommittedPoint": [
				611.8472002799579,
				6.967780264800922
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "tlsXMJel",
				"focus": 0.12218754415756858,
				"gap": 14
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "OjopWKgzWNDFfPEKZR5co",
			"type": "arrow",
			"x": -163.97788060591301,
			"y": 1243.416201273167,
			"width": 599.1665894217049,
			"height": 15.972556467717595,
			"angle": 0,
			"strokeColor": "#9c36b5",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aW",
			"roundness": {
				"type": 2
			},
			"seed": 872671943,
			"version": 132,
			"versionNonce": 682504745,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424081710,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					599.1665894217049,
					15.972556467717595
				]
			],
			"lastCommittedPoint": [
				598.1364068556725,
				17.032312736335143
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "ihas2BXK",
				"focus": -0.2922710077589329,
				"gap": 7.098894409568402
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "g2AUz_YaGcgNAQbSJWaLr",
			"type": "rectangle",
			"x": -419.88583324719457,
			"y": 1256.2538584528766,
			"width": 397.2509235455591,
			"height": 139.8241733116106,
			"angle": 0,
			"strokeColor": "#c2255c",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aX",
			"roundness": {
				"type": 3
			},
			"seed": 1990522215,
			"version": 188,
			"versionNonce": 1411197801,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "6c24RxMtI7Vq-gY6PQG6f",
					"type": "arrow"
				}
			],
			"updated": 1755427943926,
			"link": null,
			"locked": false
		},
		{
			"id": "6c24RxMtI7Vq-gY6PQG6f",
			"type": "arrow",
			"x": -19.20579462168888,
			"y": 1307.4218674065935,
			"width": 454.76302783723884,
			"height": 9.45771304349796,
			"angle": 0,
			"strokeColor": "#c2255c",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aY",
			"roundness": {
				"type": 2
			},
			"seed": 930009575,
			"version": 151,
			"versionNonce": 1142281801,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427943927,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					454.76302783723884,
					9.45771304349796
				]
			],
			"lastCommittedPoint": [
				476.9683235643556,
				34.63906931943393
			],
			"startBinding": {
				"elementId": "g2AUz_YaGcgNAQbSJWaLr",
				"focus": -0.3099042390390446,
				"gap": 3.6488350574218202
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "Eco2pFHx",
			"type": "text",
			"x": 455.17425059682,
			"y": 1303.722503357699,
			"width": 256.6998291015625,
			"height": 25,
			"angle": 0,
			"strokeColor": "#c2255c",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aZ",
			"roundness": null,
			"seed": 2139100009,
			"version": 72,
			"versionNonce": 430953865,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424122659,
			"link": null,
			"locked": false,
			"text": "Save each user to the DB",
			"rawText": "Save each user to the DB",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Save each user to the DB",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "CQ5c9y0YwkXTIqmVkmYbz",
			"type": "rectangle",
			"x": -441.10939988589575,
			"y": 1408.5138446365197,
			"width": 271.5872640155176,
			"height": 46.72662280501436,
			"angle": 0,
			"strokeColor": "#868e96",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "aa",
			"roundness": {
				"type": 3
			},
			"seed": 621299977,
			"version": 187,
			"versionNonce": 1803817481,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "qDs3gj9TC33eW7cWS6P28",
					"type": "arrow"
				}
			],
			"updated": 1755424154587,
			"link": null,
			"locked": false
		},
		{
			"id": "qDs3gj9TC33eW7cWS6P28",
			"type": "arrow",
			"x": -160.76862778032068,
			"y": 1439.8501252360138,
			"width": 598.0738935045065,
			"height": 5.525524672355459,
			"angle": 0,
			"strokeColor": "#868e96",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "ab",
			"roundness": {
				"type": 2
			},
			"seed": 615488329,
			"version": 49,
			"versionNonce": 1301798697,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424154587,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					598.0738935045065,
					-5.525524672355459
				]
			],
			"lastCommittedPoint": [
				598.0738935045065,
				-5.525524672355459
			],
			"startBinding": {
				"elementId": "CQ5c9y0YwkXTIqmVkmYbz",
				"focus": 0.3781161040253875,
				"gap": 8.753508090057466
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "wPqQjEUK",
			"type": "text",
			"x": 452.7634882860197,
			"y": 1423.966700193206,
			"width": 456.63360595703125,
			"height": 24.962538815780594,
			"angle": 0,
			"strokeColor": "#868e96",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "ac",
			"roundness": null,
			"seed": 1908880935,
			"version": 111,
			"versionNonce": 1090118825,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424174925,
			"link": null,
			"locked": false,
			"text": "Disconnect from the DB and exit successfully ",
			"rawText": "Disconnect from the DB and exit successfully ",
			"fontSize": 19.970031052624474,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Disconnect from the DB and exit successfully ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "8gd2tk_wwd_Fo0giykyqG",
			"type": "rectangle",
			"x": -439.5110950479366,
			"y": 1455.9522299417017,
			"width": 304.8091299094531,
			"height": 45.67138807203537,
			"angle": 0,
			"strokeColor": "#fab005",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "ad",
			"roundness": {
				"type": 3
			},
			"seed": 1036109865,
			"version": 152,
			"versionNonce": 823517769,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "CcIxL4WK1PkoMwe9EV0RT",
					"type": "arrow"
				}
			],
			"updated": 1755424194533,
			"link": null,
			"locked": false
		},
		{
			"id": "CcIxL4WK1PkoMwe9EV0RT",
			"type": "arrow",
			"x": -130.68109234353892,
			"y": 1482.1250716275606,
			"width": 561.4807551632302,
			"height": 5.987584966461327,
			"angle": 0,
			"strokeColor": "#fab005",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "ae",
			"roundness": {
				"type": 2
			},
			"seed": 1329108265,
			"version": 59,
			"versionNonce": 53393257,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424194533,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					561.4807551632302,
					5.987584966461327
				]
			],
			"lastCommittedPoint": [
				561.4807551632302,
				5.987584966461327
			],
			"startBinding": {
				"elementId": "8gd2tk_wwd_Fo0giykyqG",
				"focus": 0.06823289059358884,
				"gap": 4.02087279494458
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "wBiamIrF",
			"type": "text",
			"x": 472.9184428995238,
			"y": 1484.1292449832963,
			"width": 252.1598358154297,
			"height": 25,
			"angle": 0,
			"strokeColor": "#fab005",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "af",
			"roundness": null,
			"seed": 1932071399,
			"version": 52,
			"versionNonce": 1469379335,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424215950,
			"link": null,
			"locked": false,
			"text": "If there's an error, log it ",
			"rawText": "If there's an error, log it ",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "If there's an error, log it ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "pXCiHmTbqQ3fLnCINMjSY",
			"type": "arrow",
			"x": -375.1465760504411,
			"y": 1600.8084248093278,
			"width": 829.9150751956852,
			"height": 3.321519312049759,
			"angle": 0,
			"strokeColor": "#15aabf",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "ag",
			"roundness": {
				"type": 2
			},
			"seed": 1590863977,
			"version": 76,
			"versionNonce": 2052555913,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424235393,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					829.9150751956852,
					3.321519312049759
				]
			],
			"lastCommittedPoint": [
				829.9150751956852,
				3.321519312049759
			],
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "KBGJ03m7",
			"type": "text",
			"x": 493.4347628344599,
			"y": 1595.133055400095,
			"width": 149.59988403320312,
			"height": 25,
			"angle": 0,
			"strokeColor": "#15aabf",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "ah",
			"roundness": null,
			"seed": 535300969,
			"version": 32,
			"versionNonce": 758189415,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424248265,
			"link": null,
			"locked": false,
			"text": "Run the script ",
			"rawText": "Run the script ",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Run the script ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "EkuitOHU",
			"type": "text",
			"x": -278.771320827585,
			"y": -645.9114365402163,
			"width": 484.8478698730469,
			"height": 45,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "ai",
			"roundness": null,
			"seed": 714811241,
			"version": 100,
			"versionNonce": 958274441,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755424270973,
			"link": null,
			"locked": false,
			"text": "SEEDING THE USERS DB ",
			"rawText": "SEEDING THE USERS DB ",
			"fontSize": 36,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "SEEDING THE USERS DB ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "mDpQHlsY",
			"type": "text",
			"x": 1180.8055563233577,
			"y": -350.85933996966935,
			"width": 1183.9847412109375,
			"height": 2408.6871209653254,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0m",
			"roundness": null,
			"seed": 1800010631,
			"version": 469,
			"versionNonce": 604747527,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "MlQuFYOgZ7UpLpg6cSuTu",
					"type": "arrow"
				}
			],
			"updated": 1755428253158,
			"link": null,
			"locked": false,
			"text": "const mongoose = require(\"mongoose\");\nconst User = require(\"./models/user\");\nconst Post = require(\"./models/post\");\nrequire(\"dotenv\").config();\n\nasync function connectToDatabase() {\n    const mongoDbUrl = process.env.MONGODB_URL;\n\n    if (!mongoDbUrl) {\n        console.error(\n            \"No MongoDB url provided. Make sure there is a MONGODB_URL \n                environment variable set. See the README for more details.\"\n        );\n        throw new Error(\"No connection string provided\");\n    }\n\n    await mongoose.connect(mongoDbUrl);\n\n    if (process.env.NODE_ENV !== \"test\") {\n        console.log(process.env.NODE_ENV)\n        console.log(\"Successfully connected to MongoDB\")\n    }\n}\n\nconst postContents = [\n    {\"post\": \"Just because you’re plotting world domination doesn’t mean you can’t \n        stop to smell the roses… then genetically enhance them to spit acid.\"},\n    {\"post\": \"Feeling cute, might vaporize the moon later, idk.\"},\n    {\"post\": \"Sometimes the greatest battles are fought in silence… and sometimes \n        with a death ray. :sparkles:\"},\n    {\"post\": \"Anyone know a good dry cleaner for cape soot? Asking for a friend.\"},\n    {\"post\": \"Spent the day at the beach with my henchmen. Sand got everywhere… \n        especially in the giant robot joints.\"},\n    {\"post\": \"Your worth isn’t defined by your failures… unless you fail to \n        annihilate your nemesis. Then, yes, that’s on you.\"},\n    {\"post\": \"Date night with my beloved sidekick :heart: We poisoned the \n        wine together. #CoupleGoals\"},\n    {\"post\": \"Nothing like a quiet evening reading by candlelight… \n        in the ruins of my enemies’ lair.\"},\n    {\"post\": \"Power is taken, not given. Unless it’s gift-wrapped with a \n        lovely bow, in which case thank you Karen for the blender!\"},\n    {\"post\": \"Ran into my old arch-nemesis at the grocery store. Awkward.\"},\n    {\"post\": \"Be the change you wish to see in the world. Or just change \n        the world to your liking. Both work.\"},\n    {\"post\": \"Is it weird to feel nostalgic about your first volcano lair?\"},\n    {\"post\": \"Don’t let small minds convince you your plans are too big.\"},\n    {\"post\": \"Sunday fun day! We robbed a train AND had brunch.\"},\n    {\"post\": \"Sometimes I think my doomsday device is the only one who understands me.\"},\n    {\"post\": \"You’re never too old to start a new hobby… like summoning eldritch horrors.\"},\n    {\"post\": \"Anyone else’s minions keep eating their lunch from the lair fridge??\"},\n    {\"post\": \"It’s okay to outgrow people. Especially when you grow into a 30-foot mech suit.\"}\n];\n\nconst seedPosts = async () => {\n    await connectToDatabase();\n\n    try {\n        await Post.deleteMany({});\n        const users = await User.find({});\n\n        if (!users.length) {\n            console.log(\"No users found. Seed users first.\");\n            process.exit(1)\n        }\n\n        for (let i = 0; i < users.length; i++) {\n            const post = new Post ({\n                message: postContents[i].post,\n                author: users[i % users.length]._id,\n                createdAt: new Date()\n            });\n\n            await post.save();\n        }\n        console.log(\"Posts created successfully.\")\n        await mongoose.disconnect();\n        process.exit(0);\n    } catch (err) {\n        console.error(\"Error seeding posts:\", err);\n        await mongoose.disconnect();\n        process.exit(1);\n    }\n};\n\nseedPosts();",
			"rawText": "const mongoose = require(\"mongoose\");\nconst User = require(\"./models/user\");\nconst Post = require(\"./models/post\");\nrequire(\"dotenv\").config();\n\nasync function connectToDatabase() {\n    const mongoDbUrl = process.env.MONGODB_URL;\n\n    if (!mongoDbUrl) {\n        console.error(\n            \"No MongoDB url provided. Make sure there is a MONGODB_URL \n                environment variable set. See the README for more details.\"\n        );\n        throw new Error(\"No connection string provided\");\n    }\n\n    await mongoose.connect(mongoDbUrl);\n\n    if (process.env.NODE_ENV !== \"test\") {\n        console.log(process.env.NODE_ENV)\n        console.log(\"Successfully connected to MongoDB\")\n    }\n}\n\nconst postContents = [\n    {\"post\": \"Just because you’re plotting world domination doesn’t mean you can’t \n        stop to smell the roses… then genetically enhance them to spit acid.\"},\n    {\"post\": \"Feeling cute, might vaporize the moon later, idk.\"},\n    {\"post\": \"Sometimes the greatest battles are fought in silence… and sometimes \n        with a death ray. :sparkles:\"},\n    {\"post\": \"Anyone know a good dry cleaner for cape soot? Asking for a friend.\"},\n    {\"post\": \"Spent the day at the beach with my henchmen. Sand got everywhere… \n        especially in the giant robot joints.\"},\n    {\"post\": \"Your worth isn’t defined by your failures… unless you fail to \n        annihilate your nemesis. Then, yes, that’s on you.\"},\n    {\"post\": \"Date night with my beloved sidekick :heart: We poisoned the \n        wine together. #CoupleGoals\"},\n    {\"post\": \"Nothing like a quiet evening reading by candlelight… \n        in the ruins of my enemies’ lair.\"},\n    {\"post\": \"Power is taken, not given. Unless it’s gift-wrapped with a \n        lovely bow, in which case thank you Karen for the blender!\"},\n    {\"post\": \"Ran into my old arch-nemesis at the grocery store. Awkward.\"},\n    {\"post\": \"Be the change you wish to see in the world. Or just change \n        the world to your liking. Both work.\"},\n    {\"post\": \"Is it weird to feel nostalgic about your first volcano lair?\"},\n    {\"post\": \"Don’t let small minds convince you your plans are too big.\"},\n    {\"post\": \"Sunday fun day! We robbed a train AND had brunch.\"},\n    {\"post\": \"Sometimes I think my doomsday device is the only one who understands me.\"},\n    {\"post\": \"You’re never too old to start a new hobby… like summoning eldritch horrors.\"},\n    {\"post\": \"Anyone else’s minions keep eating their lunch from the lair fridge??\"},\n    {\"post\": \"It’s okay to outgrow people. Especially when you grow into a 30-foot mech suit.\"}\n];\n\nconst seedPosts = async () => {\n    await connectToDatabase();\n\n    try {\n        await Post.deleteMany({});\n        const users = await User.find({});\n\n        if (!users.length) {\n            console.log(\"No users found. Seed users first.\");\n            process.exit(1)\n        }\n\n        for (let i = 0; i < users.length; i++) {\n            const post = new Post ({\n                message: postContents[i].post,\n                author: users[i % users.length]._id,\n                createdAt: new Date()\n            });\n\n            await post.save();\n        }\n        console.log(\"Posts created successfully.\")\n        await mongoose.disconnect();\n        process.exit(0);\n    } catch (err) {\n        console.error(\"Error seeding posts:\", err);\n        await mongoose.disconnect();\n        process.exit(1);\n    }\n};\n\nseedPosts();",
			"fontSize": 22.66999643261483,
			"fontFamily": 8,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "const mongoose = require(\"mongoose\");\nconst User = require(\"./models/user\");\nconst Post = require(\"./models/post\");\nrequire(\"dotenv\").config();\n\nasync function connectToDatabase() {\n    const mongoDbUrl = process.env.MONGODB_URL;\n\n    if (!mongoDbUrl) {\n        console.error(\n            \"No MongoDB url provided. Make sure there is a MONGODB_URL \n                environment variable set. See the README for more details.\"\n        );\n        throw new Error(\"No connection string provided\");\n    }\n\n    await mongoose.connect(mongoDbUrl);\n\n    if (process.env.NODE_ENV !== \"test\") {\n        console.log(process.env.NODE_ENV)\n        console.log(\"Successfully connected to MongoDB\")\n    }\n}\n\nconst postContents = [\n    {\"post\": \"Just because you’re plotting world domination doesn’t mean you can’t \n        stop to smell the roses… then genetically enhance them to spit acid.\"},\n    {\"post\": \"Feeling cute, might vaporize the moon later, idk.\"},\n    {\"post\": \"Sometimes the greatest battles are fought in silence… and sometimes \n        with a death ray. :sparkles:\"},\n    {\"post\": \"Anyone know a good dry cleaner for cape soot? Asking for a friend.\"},\n    {\"post\": \"Spent the day at the beach with my henchmen. Sand got everywhere… \n        especially in the giant robot joints.\"},\n    {\"post\": \"Your worth isn’t defined by your failures… unless you fail to \n        annihilate your nemesis. Then, yes, that’s on you.\"},\n    {\"post\": \"Date night with my beloved sidekick :heart: We poisoned the \n        wine together. #CoupleGoals\"},\n    {\"post\": \"Nothing like a quiet evening reading by candlelight… \n        in the ruins of my enemies’ lair.\"},\n    {\"post\": \"Power is taken, not given. Unless it’s gift-wrapped with a \n        lovely bow, in which case thank you Karen for the blender!\"},\n    {\"post\": \"Ran into my old arch-nemesis at the grocery store. Awkward.\"},\n    {\"post\": \"Be the change you wish to see in the world. Or just change \n        the world to your liking. Both work.\"},\n    {\"post\": \"Is it weird to feel nostalgic about your first volcano lair?\"},\n    {\"post\": \"Don’t let small minds convince you your plans are too big.\"},\n    {\"post\": \"Sunday fun day! We robbed a train AND had brunch.\"},\n    {\"post\": \"Sometimes I think my doomsday device is the only one who understands me.\"},\n    {\"post\": \"You’re never too old to start a new hobby… like summoning eldritch horrors.\"},\n    {\"post\": \"Anyone else’s minions keep eating their lunch from the lair fridge??\"},\n    {\"post\": \"It’s okay to outgrow people. Especially when you grow into a 30-foot mech suit.\"}\n];\n\nconst seedPosts = async () => {\n    await connectToDatabase();\n\n    try {\n        await Post.deleteMany({});\n        const users = await User.find({});\n\n        if (!users.length) {\n            console.log(\"No users found. Seed users first.\");\n            process.exit(1)\n        }\n\n        for (let i = 0; i < users.length; i++) {\n            const post = new Post ({\n                message: postContents[i].post,\n                author: users[i % users.length]._id,\n                createdAt: new Date()\n            });\n\n            await post.save();\n        }\n        console.log(\"Posts created successfully.\")\n        await mongoose.disconnect();\n        process.exit(0);\n    } catch (err) {\n        console.error(\"Error seeding posts:\", err);\n        await mongoose.disconnect();\n        process.exit(1);\n    }\n};\n\nseedPosts();",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "4v0ZUDWM92dXeQz-jrDnd",
			"type": "rectangle",
			"x": 1143.0865488772022,
			"y": -390.48449934338817,
			"width": 1265.775719455529,
			"height": 2485.830473303033,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0n",
			"roundness": {
				"type": 3
			},
			"seed": 542789705,
			"version": 187,
			"versionNonce": 2057997897,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427460944,
			"link": null,
			"locked": false
		},
		{
			"id": "3HEvDyR4",
			"type": "text",
			"x": 1527.5613324258916,
			"y": -608.6751418963286,
			"width": 490.21185302734375,
			"height": 45,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0o",
			"roundness": null,
			"seed": 494467687,
			"version": 152,
			"versionNonce": 33153289,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755427477940,
			"link": null,
			"locked": false,
			"text": "SEEDING THE POSTS DB ",
			"rawText": "SEEDING THE POSTS DB ",
			"fontSize": 36,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "SEEDING THE POSTS DB ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "pRbqIeDM",
			"type": "text",
			"x": 3516.2752936940838,
			"y": 962.4813946867414,
			"width": 1358.498861828203,
			"height": 672.0253246950524,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0p",
			"roundness": null,
			"seed": 442091081,
			"version": 371,
			"versionNonce": 646142471,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427696728,
			"link": null,
			"locked": false,
			"text": "const mongoose = require(\"mongoose\");\nconst User = require(\"./user\");\n\nconst PostSchema = new mongoose.Schema({\n  message: { type: String, required: true },\n  author: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n    required: true\n  },\n  createdAt: { type: Date, default: Date.now }\n});\n\nconst Post = mongoose.model(\"Post\", PostSchema);\nconst dateTimeString = new Date().toLocaleString(\"en-GB\");\n\nmodule.exports = Post;",
			"rawText": "const mongoose = require(\"mongoose\");\nconst User = require(\"./user\");\n\nconst PostSchema = new mongoose.Schema({\n  message: { type: String, required: true },\n  author: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n    required: true\n  },\n  createdAt: { type: Date, default: Date.now }\n});\n\nconst Post = mongoose.model(\"Post\", PostSchema);\nconst dateTimeString = new Date().toLocaleString(\"en-GB\");\n\nmodule.exports = Post;",
			"fontSize": 31.624721162120114,
			"fontFamily": 8,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "const mongoose = require(\"mongoose\");\nconst User = require(\"./user\");\n\nconst PostSchema = new mongoose.Schema({\n  message: { type: String, required: true },\n  author: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n    required: true\n  },\n  createdAt: { type: Date, default: Date.now }\n});\n\nconst Post = mongoose.model(\"Post\", PostSchema);\nconst dateTimeString = new Date().toLocaleString(\"en-GB\");\n\nmodule.exports = Post;",
			"autoResize": false,
			"lineHeight": 1.25
		},
		{
			"id": "5H5KMIGxnea6UeqCKU4n4",
			"type": "rectangle",
			"x": 3469.5013757843244,
			"y": 879.9342604076123,
			"width": 1459.8151548364053,
			"height": 788.511075050649,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0q",
			"roundness": {
				"type": 3
			},
			"seed": 971654503,
			"version": 275,
			"versionNonce": 172780359,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "zMqodYLBZEcXLbU3EA6Hl",
					"type": "arrow"
				}
			],
			"updated": 1755428824017,
			"link": null,
			"locked": false
		},
		{
			"id": "OwGHX3vb",
			"type": "text",
			"x": 3507.9156273319304,
			"y": -251.71437769750747,
			"width": 1304.3243408203125,
			"height": 513.9017188844518,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0r",
			"roundness": null,
			"seed": 371811049,
			"version": 184,
			"versionNonce": 1818564359,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427634122,
			"link": null,
			"locked": false,
			"text": "const mongoose = require(\"mongoose\");\n\nconst PostSchema = new mongoose.Schema({\n  message: String,\n});\n\nconst Post = mongoose.model(\"Post\", PostSchema);\n\nconst dateTimeString = new Date().toLocaleString(\"en-GB\");\nnew Post({ message: `Test message, created at ${dateTimeString}` }).save();\n\nmodule.exports = Post;\n",
			"rawText": "const mongoose = require(\"mongoose\");\n\nconst PostSchema = new mongoose.Schema({\n  message: String,\n});\n\nconst Post = mongoose.model(\"Post\", PostSchema);\n\nconst dateTimeString = new Date().toLocaleString(\"en-GB\");\nnew Post({ message: `Test message, created at ${dateTimeString}` }).save();\n\nmodule.exports = Post;\n",
			"fontSize": 31.624721162120114,
			"fontFamily": 8,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "const mongoose = require(\"mongoose\");\n\nconst PostSchema = new mongoose.Schema({\n  message: String,\n});\n\nconst Post = mongoose.model(\"Post\", PostSchema);\n\nconst dateTimeString = new Date().toLocaleString(\"en-GB\");\nnew Post({ message: `Test message, created at ${dateTimeString}` }).save();\n\nmodule.exports = Post;\n",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "hDZLw3OFzTICDKpYKYNAX",
			"type": "rectangle",
			"x": 3476.834187323502,
			"y": -285.9242388104476,
			"width": 1459.8151548364053,
			"height": 549.1044370056081,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0s",
			"roundness": {
				"type": 3
			},
			"seed": 385868743,
			"version": 387,
			"versionNonce": 1293449769,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "zMqodYLBZEcXLbU3EA6Hl",
					"type": "arrow"
				}
			],
			"updated": 1755427667544,
			"link": null,
			"locked": false
		},
		{
			"id": "ipNnNvXe",
			"type": "text",
			"x": 4051.901806004145,
			"y": -442.3645567446475,
			"width": 256.03192138671875,
			"height": 45,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0t",
			"roundness": null,
			"seed": 1028485833,
			"version": 76,
			"versionNonce": 110370535,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427597961,
			"link": null,
			"locked": false,
			"text": "models/post.js",
			"rawText": "models/post.js",
			"fontSize": 36,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "models/post.js",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "zMqodYLBZEcXLbU3EA6Hl",
			"type": "arrow",
			"x": 4201.707051016254,
			"y": 264.5646457992754,
			"width": 2.915396574963779,
			"height": 612.7570242600466,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0u",
			"roundness": {
				"type": 2
			},
			"seed": 1961827817,
			"version": 149,
			"versionNonce": 5073511,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428824017,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-2.915396574963779,
					612.7570242600466
				]
			],
			"lastCommittedPoint": [
				-1.653742527405484,
				353.6716692273924
			],
			"startBinding": {
				"elementId": "hDZLw3OFzTICDKpYKYNAX",
				"focus": 0.005105285001990463,
				"gap": 3.902271826123865
			},
			"endBinding": {
				"elementId": "5H5KMIGxnea6UeqCKU4n4",
				"focus": -0.00342427427551866,
				"gap": 5.47056381201503
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "L0RBF1QB75eBe2XW_rvhB",
			"type": "freedraw",
			"x": 3482.2197411683896,
			"y": 799.9036122195407,
			"width": 173.18400593031583,
			"height": 188.33363707021454,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0v",
			"roundness": null,
			"seed": 617007017,
			"version": 123,
			"versionNonce": 441494119,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503405827,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					0.11908137011050712,
					0.1059328021606234
				],
				[
					1.627445391506626,
					2.52725399440169
				],
				[
					5.385454963235134,
					8.587255302074027
				],
				[
					9.81776279321366,
					17.253650098034086
				],
				[
					12.06691217117077,
					25.523106993626698
				],
				[
					12.715409465895391,
					33.118017544782106
				],
				[
					14.67380183183377,
					42.00942651301284
				],
				[
					18.563793255434575,
					52.02541017022213
				],
				[
					22.25531572885211,
					58.42925893408756
				],
				[
					24.213211922414303,
					60.255173275777906
				],
				[
					25.602494573699914,
					60.05670432559418
				],
				[
					28.44754697458393,
					54.4201861403767
				],
				[
					33.06492710060775,
					44.907073185695026
				],
				[
					41.09646934216835,
					32.01973999170286
				],
				[
					51.879783578025126,
					17.901899306571522
				],
				[
					65.45505977059202,
					2.4347178463785895
				],
				[
					76.78118658520089,
					-10.333533977503066
				],
				[
					94.52431073162552,
					-32.337042225809455
				],
				[
					116.72653601630373,
					-61.4194417547933
				],
				[
					129.11099850776736,
					-79.89020268982904
				],
				[
					139.36489681901003,
					-95.59579497643017
				],
				[
					148.95789352613974,
					-107.05415172909989
				],
				[
					157.79621205019612,
					-115.17798203249504
				],
				[
					165.81435763761874,
					-122.33626089324616
				],
				[
					170.97455034239556,
					-126.42472126703115
				],
				[
					172.91954605419596,
					-127.84030105421652
				],
				[
					173.18400593031583,
					-128.07846379443663
				],
				[
					173.18400593031583,
					-128.07846379443663
				]
			],
			"pressures": [],
			"simulatePressure": true,
			"lastCommittedPoint": [
				173.18400593031583,
				-128.07846379443663
			]
		},
		{
			"id": "Mzvpu-OiF1GqHwpTNro0p",
			"type": "freedraw",
			"x": 3533.9280035285633,
			"y": -389.966500658831,
			"width": 108.61560619466945,
			"height": 73.75106188827112,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0w",
			"roundness": null,
			"seed": 399980681,
			"version": 77,
			"versionNonce": 1733380297,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503411778,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-0.48972213457818725,
					0.1984689501837238
				],
				[
					-7.912460871449184,
					3.691522473417308
				],
				[
					-16.433229075211784,
					8.640097660060633
				],
				[
					-28.500141246381645,
					16.35384149513868
				],
				[
					-46.03189596086122,
					27.124131206139964
				],
				[
					-62.99404478831275,
					38.96615324813331
				],
				[
					-78.01169407634006,
					51.033065419303625
				],
				[
					-92.14268332942083,
					61.77680990821784
				],
				[
					-100.45208210123747,
					68.12781631409689
				],
				[
					-105.41380585583101,
					71.91199897863123
				],
				[
					-107.96710889994392,
					73.75106188827112
				],
				[
					-108.61560619466945,
					72.79841092738923
				],
				[
					-108.61560619466945,
					72.79841092738923
				]
			],
			"pressures": [],
			"simulatePressure": true,
			"lastCommittedPoint": [
				-108.61560619466945,
				72.79841092738923
			]
		},
		{
			"id": "E-isvFvto1Q6q_0mPYt73",
			"type": "freedraw",
			"x": 3427.87278293002,
			"y": -413.2292065732086,
			"width": 140.11907882970718,
			"height": 104.23589263649069,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0x",
			"roundness": null,
			"seed": 1224509033,
			"version": 83,
			"versionNonce": 1623653447,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503408512,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					0.2118656043212468,
					0.3969379003674476
				],
				[
					2.3950240563417537,
					3.440087122153159
				],
				[
					8.190317401706125,
					9.989562478216044
				],
				[
					56.43117277811325,
					52.14436749723859
				],
				[
					78.79217322293698,
					70.54901346324436
				],
				[
					101.32484930967075,
					86.67796482920619
				],
				[
					120.04741772525176,
					97.71283845942116
				],
				[
					132.55096158682682,
					102.46282065278683
				],
				[
					138.888571338568,
					104.23589263649069
				],
				[
					140.11907882970718,
					103.90506970515321
				],
				[
					140.11907882970718,
					103.90506970515321
				]
			],
			"pressures": [],
			"simulatePressure": true,
			"lastCommittedPoint": [
				140.11907882970718,
				103.90506970515321
			]
		},
		{
			"id": "OU86eb36",
			"type": "text",
			"x": 1751.090854580904,
			"y": -321.4140072374958,
			"width": 190.15988159179688,
			"height": 25,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0y",
			"roundness": null,
			"seed": 126384649,
			"version": 106,
			"versionNonce": 1059789607,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755427738510,
			"link": null,
			"locked": false,
			"text": "Imports and setup ",
			"rawText": "Imports and setup ",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Imports and setup ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "zLBydFyxSeqGAk8FfqxfQ",
			"type": "rectangle",
			"x": 1165.2557015544858,
			"y": -350.7790174672721,
			"width": 504.1659701483213,
			"height": 119.01779980221852,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b0z",
			"roundness": {
				"type": 3
			},
			"seed": 1469020295,
			"version": 212,
			"versionNonce": 222014281,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755427747110,
			"link": null,
			"locked": false
		},
		{
			"id": "OUeSRM79cpLg50F3nV6CL",
			"type": "rectangle",
			"x": 1167.7802644718458,
			"y": -145.88044618849517,
			"width": 960.8835745780951,
			"height": 455.8924019780917,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b10",
			"roundness": {
				"type": 3
			},
			"seed": 1793967111,
			"version": 95,
			"versionNonce": 1091367305,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427782909,
			"link": null,
			"locked": false
		},
		{
			"id": "IlDGRiM1y5C69pYwOA3Zu",
			"type": "arrow",
			"x": 1215.2944828285545,
			"y": -93.61160918862623,
			"width": 242.06241582796622,
			"height": 100.59184684474673,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b11",
			"roundness": {
				"type": 2
			},
			"seed": 1173290663,
			"version": 70,
			"versionNonce": 394852329,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427792471,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-242.06241582796622,
					-100.59184684474673
				]
			],
			"lastCommittedPoint": [
				-242.06241582796622,
				-100.59184684474673
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "O7CYAs71",
				"focus": -0.7717173818800259,
				"gap": 13.497767732503803
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "DJf4f5E6SqBlU2yjSYgiQ",
			"type": "arrow",
			"x": 1255.160241376885,
			"y": 32.6871943539731,
			"width": 426.88406561845306,
			"height": 157.22736251311903,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b12",
			"roundness": {
				"type": 2
			},
			"seed": 87374183,
			"version": 55,
			"versionNonce": 173934823,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427796879,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-426.88406561845306,
					-157.22736251311903
				]
			],
			"lastCommittedPoint": [
				-426.88406561845306,
				-157.22736251311903
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "PXCMja37",
				"focus": -0.8957108964378052,
				"gap": 14
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "1QpZtMiPuvByNQE8XTTkG",
			"type": "arrow",
			"x": 1227.1647144741582,
			"y": 122.28342315565754,
			"width": 302.5515705226222,
			"height": 176.91701954972427,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b13",
			"roundness": {
				"type": 2
			},
			"seed": 1882304201,
			"version": 89,
			"versionNonce": 431748137,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427805247,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-302.5515705226222,
					-176.91701954972427
				]
			],
			"lastCommittedPoint": [
				-302.5515705226222,
				-176.91701954972427
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "uAdn5Zxt",
				"focus": -0.9234776030297706,
				"gap": 14
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "ecsV-9D1wepmi90BGnmhd",
			"type": "arrow",
			"x": 1222.982155134216,
			"y": 184.39708044536286,
			"width": 351.7229070694028,
			"height": 147.90217876776308,
			"angle": 0,
			"strokeColor": "#f08c00",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b14",
			"roundness": {
				"type": 2
			},
			"seed": 147593417,
			"version": 59,
			"versionNonce": 488252169,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755427811814,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-351.7229070694028,
					-147.90217876776308
				]
			],
			"lastCommittedPoint": [
				-351.7229070694028,
				-147.90217876776308
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "z1xAuRJQ",
				"focus": -0.15257068920701636,
				"gap": 12.458030321772014
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "fu_i2nkQLloulpOh1nsxT",
			"type": "rectangle",
			"x": 1164.7617116614474,
			"y": 324.68515271585636,
			"width": 1212.1728988037185,
			"height": 810.66541563513,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b15",
			"roundness": {
				"type": 3
			},
			"seed": 247134055,
			"version": 202,
			"versionNonce": 698072679,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "GZajFkl8zVlWL3GNunt4M",
					"type": "arrow"
				}
			],
			"updated": 1755503388995,
			"link": null,
			"locked": false
		},
		{
			"id": "e5E05Ah7",
			"type": "text",
			"x": 782.8663623457995,
			"y": 386.88686679678216,
			"width": 247.4998321533203,
			"height": 25,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b16",
			"roundness": null,
			"seed": 203604263,
			"version": 189,
			"versionNonce": 1932501289,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "GZajFkl8zVlWL3GNunt4M",
					"type": "arrow"
				}
			],
			"updated": 1755427864853,
			"link": null,
			"locked": false,
			"text": "Seed data: postContents",
			"rawText": "Seed data: postContents",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Seed data: postContents",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "GZajFkl8zVlWL3GNunt4M",
			"type": "arrow",
			"x": 1147.9377253477908,
			"y": 403.1190809676568,
			"width": 103.57153084867082,
			"height": 0.5477398838789327,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b17",
			"roundness": {
				"type": 2
			},
			"seed": 33023719,
			"version": 93,
			"versionNonce": 478501255,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503388996,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-103.57153084867082,
					-0.5477398838789327
				]
			],
			"lastCommittedPoint": [
				-138.11656823657745,
				0.17756148141268113
			],
			"startBinding": {
				"elementId": "fu_i2nkQLloulpOh1nsxT",
				"focus": 0.7931313177374488,
				"gap": 20.340716551044125
			},
			"endBinding": {
				"elementId": "e5E05Ah7",
				"focus": 0.1794472870928033,
				"gap": 14
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "MlQuFYOgZ7UpLpg6cSuTu",
			"type": "arrow",
			"x": 1152.8507824085684,
			"y": 1200.894708805938,
			"width": 487.1820432122562,
			"height": 13.275782751067254,
			"angle": 0,
			"strokeColor": "#da77f2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b19",
			"roundness": {
				"type": 2
			},
			"seed": 1612175657,
			"version": 312,
			"versionNonce": 61685287,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755428253158,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-487.1820432122562,
					13.275782751067254
				]
			],
			"lastCommittedPoint": null,
			"startBinding": {
				"elementId": "mDpQHlsY",
				"focus": -0.27080131614276165,
				"gap": 27.95477391478903
			},
			"endBinding": {
				"elementId": "tlsXMJel",
				"focus": 0.38186163652176475,
				"gap": 15.716587308482872
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "BAWeaYrCTpCHa5C0PXWml",
			"type": "arrow",
			"x": 1265.5095182451428,
			"y": 1277.1296737882144,
			"width": 530.3875686136323,
			"height": 16.04763569373722,
			"angle": 0,
			"strokeColor": "#9c36b5",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1A",
			"roundness": {
				"type": 2
			},
			"seed": 1080229321,
			"version": 270,
			"versionNonce": 1631401769,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755427920754,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-530.3875686136323,
					-16.04763569373722
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": {
				"elementId": "ihas2BXK",
				"focus": -0.128814066360958,
				"gap": 14
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "0VxQBgNNLfeiZ08f_PT4Z",
			"type": "line",
			"x": -397.4957542038557,
			"y": 1249.9683613882353,
			"width": 210.9377238305757,
			"height": 0.9177990133741787,
			"angle": 0,
			"strokeColor": "#9c36b5",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1B",
			"roundness": {
				"type": 2
			},
			"seed": 66919495,
			"version": 103,
			"versionNonce": 797894697,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755427930259,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					210.9377238305757,
					0.9177990133741787
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": null,
			"polygon": false
		},
		{
			"id": "c_6ItZz421nUouoXi81Vo",
			"type": "line",
			"x": 1275.698884698908,
			"y": 1286.7762399521546,
			"width": 274.5047341763021,
			"height": 1.4044284483707088,
			"angle": 0,
			"strokeColor": "#9c36b5",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1C",
			"roundness": {
				"type": 2
			},
			"seed": 464499177,
			"version": 231,
			"versionNonce": 1712820167,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755427939159,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					274.5047341763021,
					1.4044284483707088
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": null,
			"polygon": false
		},
		{
			"id": "VM4K-uOYa5Njql1EugwO7",
			"type": "line",
			"x": 1274.0475246610813,
			"y": 1315.582027998959,
			"width": 421.32725439632804,
			"height": 2.4134797747847188,
			"angle": 0,
			"strokeColor": "#4dabf7",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1D",
			"roundness": {
				"type": 2
			},
			"seed": 917790985,
			"version": 95,
			"versionNonce": 804148775,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428035809,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					421.32725439632804,
					2.4134797747847188
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": null,
			"polygon": false
		},
		{
			"id": "la8SCtwdz3xJW2vPRmwsm",
			"type": "arrow",
			"x": 1716.6819892739363,
			"y": 1303.0672111838521,
			"width": 117.01301625093174,
			"height": 8.43743799158483,
			"angle": 0,
			"strokeColor": "#4dabf7",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1E",
			"roundness": {
				"type": 2
			},
			"seed": 625828521,
			"version": 37,
			"versionNonce": 561636681,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428040303,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					117.01301625093174,
					-8.43743799158483
				]
			],
			"lastCommittedPoint": [
				117.01301625093174,
				-8.43743799158483
			],
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "4beVcKkC",
			"type": "text",
			"x": 1855.3247067057828,
			"y": 1273.1119727366176,
			"width": 523.0997314453125,
			"height": 50,
			"angle": 0,
			"strokeColor": "#4dabf7",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1F",
			"roundness": null,
			"seed": 2036771335,
			"version": 101,
			"versionNonce": 1063678375,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428050125,
			"link": null,
			"locked": false,
			"text": "This fetches all users from your database, \nso you have a list to assign as authors of the posts",
			"rawText": "This fetches all users from your database, \nso you have a list to assign as authors of the posts",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "This fetches all users from your database, \nso you have a list to assign as authors of the posts",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "puqo353L",
			"type": "text",
			"x": 1942.9258787647611,
			"y": 1349.467355554752,
			"width": 435.63970947265625,
			"height": 100,
			"angle": 0,
			"strokeColor": "#099268",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1G",
			"roundness": null,
			"seed": 1724158535,
			"version": 175,
			"versionNonce": 951715271,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428109057,
			"link": null,
			"locked": false,
			"text": "This checks if there are no users found. \nIf the user list is empty, it logs a message\ntelling you to seed users first and exits the\nprocess, because posts need authors.",
			"rawText": "This checks if there are no users found. \nIf the user list is empty, it logs a message\ntelling you to seed users first and exits the\nprocess, because posts need authors.",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "This checks if there are no users found. \nIf the user list is empty, it logs a message\ntelling you to seed users first and exits the\nprocess, because posts need authors.",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "MvAG7BOZ-KaY6lU1LTtNF",
			"type": "rectangle",
			"x": 1257.9025615488542,
			"y": 1340.5458775664415,
			"width": 675.621436775107,
			"height": 143.69976706774605,
			"angle": 0,
			"strokeColor": "#099268",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1I",
			"roundness": {
				"type": 3
			},
			"seed": 1576757127,
			"version": 86,
			"versionNonce": 414297575,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428125425,
			"link": null,
			"locked": false
		},
		{
			"id": "berFEXty",
			"type": "text",
			"x": 1792.7849456521867,
			"y": 1493.151436047466,
			"width": 409.999755859375,
			"height": 25,
			"angle": 0,
			"strokeColor": "#846358",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1J",
			"roundness": null,
			"seed": 1997958921,
			"version": 201,
			"versionNonce": 593530825,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428149392,
			"link": null,
			"locked": false,
			"text": "This loops through the users, one by one.",
			"rawText": "This loops through the users, one by one.",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "This loops through the users, one by one.",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "mahgyXUf",
			"type": "text",
			"x": 2446.615797391599,
			"y": 1529.9396672361763,
			"width": 610.1395874023438,
			"height": 75,
			"angle": 0,
			"strokeColor": "#846358",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1K",
			"roundness": null,
			"seed": 822008809,
			"version": 762,
			"versionNonce": 285689065,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "Vzv7TfrBokj8o8RNiSZAI",
					"type": "arrow"
				}
			],
			"updated": 1755428246965,
			"link": null,
			"locked": false,
			"text": "Takes the post message from your postContents array at \nindex i. So each user gets a post from the corresponding post\nin your array ",
			"rawText": "Takes the post message from your postContents array at \nindex i. So each user gets a post from the corresponding post\nin your array ",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Takes the post message from your postContents array at \nindex i. So each user gets a post from the corresponding post\nin your array ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "Cf37lRzGwa_cP2g6QxYfj",
			"type": "rectangle",
			"x": 1360.2701060275801,
			"y": 1546.8656954268472,
			"width": 407.08928971872,
			"height": 28.304656509602864,
			"angle": 0,
			"strokeColor": "#846358",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1L",
			"roundness": {
				"type": 3
			},
			"seed": 789123655,
			"version": 80,
			"versionNonce": 308417831,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "Vzv7TfrBokj8o8RNiSZAI",
					"type": "arrow"
				}
			],
			"updated": 1755428252809,
			"link": null,
			"locked": false
		},
		{
			"id": "Vzv7TfrBokj8o8RNiSZAI",
			"type": "arrow",
			"x": 1770.8847147366073,
			"y": 1561.7772466107933,
			"width": 659.8574460652649,
			"height": 0.8989637683189358,
			"angle": 0,
			"strokeColor": "#846358",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1M",
			"roundness": {
				"type": 2
			},
			"seed": 485480551,
			"version": 64,
			"versionNonce": 802347079,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428252810,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					659.8574460652649,
					-0.8989637683189358
				]
			],
			"lastCommittedPoint": [
				659.8118063738289,
				-2.900170863073072
			],
			"startBinding": {
				"elementId": "Cf37lRzGwa_cP2g6QxYfj",
				"focus": 0.06978961355434825,
				"gap": 3.5381591303155346
			},
			"endBinding": {
				"elementId": "mahgyXUf",
				"focus": 0.18776727263161186,
				"gap": 15.87363658972663
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "gmejReaAmv282r9p_SlHd",
			"type": "rectangle",
			"x": 1370.3779122483043,
			"y": 1575.9857779771319,
			"width": 469.630389282951,
			"height": 28.87679906082144,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1N",
			"roundness": {
				"type": 3
			},
			"seed": 1110105641,
			"version": 103,
			"versionNonce": 868749321,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "etSJVGxOIsrqhkvSB8ywD",
					"type": "arrow"
				}
			],
			"updated": 1755428269421,
			"link": null,
			"locked": false
		},
		{
			"id": "etSJVGxOIsrqhkvSB8ywD",
			"type": "arrow",
			"x": 1844.2105899246876,
			"y": 1584.278577345316,
			"width": 608.3321705686844,
			"height": 79.42910769863033,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1O",
			"roundness": {
				"type": 2
			},
			"seed": 229583785,
			"version": 39,
			"versionNonce": 1577295145,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428269421,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					608.3321705686844,
					79.42910769863033
				]
			],
			"lastCommittedPoint": [
				608.3321705686844,
				79.42910769863033
			],
			"startBinding": {
				"elementId": "gmejReaAmv282r9p_SlHd",
				"focus": -0.8282822037144478,
				"gap": 4.2022883934323545
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "Zzij4YDb",
			"type": "text",
			"x": 2476.467443821545,
			"y": 1660.2682944876665,
			"width": 679.6195068359375,
			"height": 100,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1P",
			"roundness": null,
			"seed": 287646761,
			"version": 243,
			"versionNonce": 1841418023,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428342539,
			"link": null,
			"locked": false,
			"text": "Assigns the user's MongoDB Object Id as the author of the post.\nThe % operator here ensures that if you had more posts than users,\nit would cycle through users without running out of indexes.\n",
			"rawText": "Assigns the user's MongoDB Object Id as the author of the post.\nThe % operator here ensures that if you had more posts than users,\nit would cycle through users without running out of indexes.\n",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Assigns the user's MongoDB Object Id as the author of the post.\nThe % operator here ensures that if you had more posts than users,\nit would cycle through users without running out of indexes.\n",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "LwXs1A3jbNS7LPJsXaxIW",
			"type": "rectangle",
			"x": 1372.4362690602636,
			"y": 1608.5058550313968,
			"width": 290.9640808748511,
			"height": 29.01484078196131,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1Q",
			"roundness": {
				"type": 3
			},
			"seed": 1738833193,
			"version": 67,
			"versionNonce": 664699529,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "F0U2G_WxSolGq-fmxZHf2",
					"type": "arrow"
				}
			],
			"updated": 1755428371050,
			"link": null,
			"locked": false
		},
		{
			"id": "F0U2G_WxSolGq-fmxZHf2",
			"type": "arrow",
			"x": 1667.701283595999,
			"y": 1635.1729384480132,
			"width": 797.0668315058019,
			"height": 157.1089881921771,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1R",
			"roundness": {
				"type": 2
			},
			"seed": 1334387433,
			"version": 82,
			"versionNonce": 1951817641,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428371050,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					797.0668315058019,
					157.1089881921771
				]
			],
			"lastCommittedPoint": [
				797.0668315058019,
				157.1089881921771
			],
			"startBinding": {
				"elementId": "LwXs1A3jbNS7LPJsXaxIW",
				"focus": -0.402098189606421,
				"gap": 5.058975075834966
			},
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "5DMdNNHn",
			"type": "text",
			"x": 2487.162742212744,
			"y": 1787.9760190876304,
			"width": 593.9196166992188,
			"height": 25,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1S",
			"roundness": null,
			"seed": 1320624103,
			"version": 45,
			"versionNonce": 1158635529,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428375627,
			"link": null,
			"locked": false,
			"text": "Sets the post’s creation date to the current date and time.",
			"rawText": "Sets the post’s creation date to the current date and time.",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Sets the post’s creation date to the current date and time.",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "gdJKwFoK",
			"type": "text",
			"x": 2456.239911275326,
			"y": 1901.3402699923465,
			"width": 753.8993530273438,
			"height": 75,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1T",
			"roundness": null,
			"seed": 137486729,
			"version": 29,
			"versionNonce": 1378428391,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "yvKfUM37gCmZ6mrWiAhHQ",
					"type": "arrow"
				},
				{
					"id": "1NUw14lCxmeHimQsJWoGu",
					"type": "arrow"
				}
			],
			"updated": 1755428479009,
			"link": null,
			"locked": false,
			"text": "process.exit(0); means success — the script finished everything as expected.\n\nprocess.exit(1); means failure or error — something went wrong.",
			"rawText": "process.exit(0); means success — the script finished everything as expected.\n\nprocess.exit(1); means failure or error — something went wrong.",
			"fontSize": 20,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "process.exit(0); means success — the script finished everything as expected.\n\nprocess.exit(1); means failure or error — something went wrong.",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "yvKfUM37gCmZ6mrWiAhHQ",
			"type": "arrow",
			"x": 1482.8137402305852,
			"y": 1815.8516093086514,
			"width": 962.8633850958458,
			"height": 93.71300407889476,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1U",
			"roundness": {
				"type": 2
			},
			"seed": 1115954121,
			"version": 82,
			"versionNonce": 369028455,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428474128,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					962.8633850958458,
					93.71300407889476
				]
			],
			"lastCommittedPoint": [
				962.8633850958458,
				93.71300407889476
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "gdJKwFoK",
				"focus": -0.11376478923214077,
				"gap": 10.562785948894998
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "1NUw14lCxmeHimQsJWoGu",
			"type": "arrow",
			"x": 1477.815754448572,
			"y": 1932.1741086874226,
			"width": 964.4021279615044,
			"height": 38.87277062484736,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1V",
			"roundness": {
				"type": 2
			},
			"seed": 1131180617,
			"version": 64,
			"versionNonce": 534353607,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428479009,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					964.4021279615044,
					38.87277062484736
				]
			],
			"lastCommittedPoint": [
				964.4021279615044,
				38.87277062484736
			],
			"startBinding": null,
			"endBinding": {
				"elementId": "gdJKwFoK",
				"focus": -0.9102706140139297,
				"gap": 14.022028865249467
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "CGQWqgEq",
			"type": "text",
			"x": 5003.888147106863,
			"y": -218.30508083268114,
			"width": 1201.0035400390625,
			"height": 245,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1W",
			"roundness": null,
			"seed": 1005516199,
			"version": 51,
			"versionNonce": 122214281,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428630562,
			"link": null,
			"locked": false,
			"text": "Original version:\n\n- Simple schema with just a message string.\n\n- Automatically creates a test post on every server start with a timestamped message.\n\n- No reference to users/authors — it’s standalone.",
			"rawText": "Original version:\n\n- Simple schema with just a message string.\n\n- Automatically creates a test post on every server start with a timestamped message.\n\n- No reference to users/authors — it’s standalone.",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Original version:\n\n- Simple schema with just a message string.\n\n- Automatically creates a test post on every server start with a timestamped message.\n\n- No reference to users/authors — it’s standalone.",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "MsaqMgjJ",
			"type": "text",
			"x": 5021.819349361863,
			"y": 924.6758720053066,
			"width": 1039.9757080078125,
			"height": 490,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1Y",
			"roundness": null,
			"seed": 1165572265,
			"version": 41,
			"versionNonce": 26879687,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428652078,
			"link": null,
			"locked": false,
			"text": "Updated version:\n\n- Schema expanded to include:\n\n- - message (required string)\n\n- - author (a required ObjectId referencing a User document)\n\n- - createdAt (timestamp with a default of now)\n\n- This schema ties posts to users, so you can link who authored each post.\n\n- No automatic test post creation anymore — you handle post \ncreation explicitly, like seeding or via your app logic.",
			"rawText": "Updated version:\n\n- Schema expanded to include:\n\n- - message (required string)\n\n- - author (a required ObjectId referencing a User document)\n\n- - createdAt (timestamp with a default of now)\n\n- This schema ties posts to users, so you can link who authored each post.\n\n- No automatic test post creation anymore — you handle post \ncreation explicitly, like seeding or via your app logic.",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Updated version:\n\n- Schema expanded to include:\n\n- - message (required string)\n\n- - author (a required ObjectId referencing a User document)\n\n- - createdAt (timestamp with a default of now)\n\n- This schema ties posts to users, so you can link who authored each post.\n\n- No automatic test post creation anymore — you handle post \ncreation explicitly, like seeding or via your app logic.",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "UHN54SvN",
			"type": "text",
			"x": 4248.35425730992,
			"y": 1201.2781070029944,
			"width": 558.935791015625,
			"height": 35,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1Z",
			"roundness": null,
			"seed": 847359943,
			"version": 61,
			"versionNonce": 1825214761,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "nnED2PQ8oL1iHUEaME2Ey",
					"type": "arrow"
				}
			],
			"updated": 1755428750903,
			"link": null,
			"locked": false,
			"text": "// The ID type of a MongoDB document",
			"rawText": "// The ID type of a MongoDB document",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "// The ID type of a MongoDB document",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "XSNtMfRZ",
			"type": "text",
			"x": 3819.2331119025985,
			"y": 1242.6499938254324,
			"width": 451.61181640625,
			"height": 35,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1a",
			"roundness": null,
			"seed": 739776807,
			"version": 47,
			"versionNonce": 693034215,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428717817,
			"link": null,
			"locked": false,
			"text": "// Reference to the \"User\" model",
			"rawText": "// Reference to the \"User\" model",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "// Reference to the \"User\" model",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "pJ55VXGL",
			"type": "text",
			"x": 4733.129095380114,
			"y": 640.7945537121535,
			"width": 708.9877319335938,
			"height": 105,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1e",
			"roundness": null,
			"seed": 1831723913,
			"version": 88,
			"versionNonce": 1670897897,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "nnED2PQ8oL1iHUEaME2Ey",
					"type": "arrow"
				}
			],
			"updated": 1755428766757,
			"link": null,
			"locked": false,
			"text": "\nThis means the author field stores an ObjectId \n— the unique ID MongoDB uses for each document.",
			"rawText": "\nThis means the author field stores an ObjectId \n— the unique ID MongoDB uses for each document.",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "\nThis means the author field stores an ObjectId \n— the unique ID MongoDB uses for each document.",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "nnED2PQ8oL1iHUEaME2Ey",
			"type": "arrow",
			"x": 4246.299559720089,
			"y": 1196.1574397176862,
			"width": 476.53762116499547,
			"height": 459.5690399856584,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1f",
			"roundness": {
				"type": 2
			},
			"seed": 1747777895,
			"version": 104,
			"versionNonce": 1622411785,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428765779,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					476.53762116499547,
					-459.5690399856584
				]
			],
			"lastCommittedPoint": [
				554.7612550935683,
				-458.04943488414847
			],
			"startBinding": {
				"elementId": "UHN54SvN",
				"focus": -1.0267118357608833,
				"gap": 5.120667285308111
			},
			"endBinding": {
				"elementId": "pJ55VXGL",
				"focus": 0.7822646959943549,
				"gap": 10.291914495029232
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "3z93Otv-eNW7kkCuiqB7e",
			"type": "arrow",
			"x": 3578.249580715071,
			"y": 1263.5630591752204,
			"width": 219.85391354028025,
			"height": 0.8746752558336084,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1g",
			"roundness": {
				"type": 2
			},
			"seed": 1805725513,
			"version": 237,
			"versionNonce": 2143345095,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428812084,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					-124.27984318432846,
					0.8746752558336084
				],
				[
					-219.85391354028025,
					0.7168428279117052
				]
			],
			"lastCommittedPoint": [
				-302.16352470178526,
				-17.41415732966857
			],
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "1A4IuBmO",
			"type": "text",
			"x": 2701.6371706527852,
			"y": 1232.321842858958,
			"width": 630.9046894712042,
			"height": 62.15076699480335,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1h",
			"roundness": null,
			"seed": 1461891721,
			"version": 223,
			"versionNonce": 183946823,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755428828467,
			"link": null,
			"locked": false,
			"text": "This tells Mongoose that this ObjectId refers to a\ndocument in the User collection.",
			"rawText": "This tells Mongoose that this ObjectId refers to a document in the User collection.",
			"fontSize": 24.86030679792134,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "This tells Mongoose that this ObjectId refers to a document in the User collection.",
			"autoResize": false,
			"lineHeight": 1.25
		},
		{
			"id": "plxRRSUz",
			"type": "text",
			"x": 2706.729098395777,
			"y": 1303.435635353832,
			"width": 618.800457241111,
			"height": 59.38357748284215,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1i",
			"roundness": null,
			"seed": 662591111,
			"version": 155,
			"versionNonce": 691651527,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755428832151,
			"link": null,
			"locked": false,
			"text": "So author isn’t just any ID — it points to a specific\nuser.",
			"rawText": "So author isn’t just any ID — it points to a specific user.",
			"fontSize": 23.75343099313686,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "So author isn’t just any ID — it points to a specific user.",
			"autoResize": false,
			"lineHeight": 1.25
		},
		{
			"id": "anulHsnT",
			"type": "text",
			"x": 7043.971101151599,
			"y": -83.72680285088018,
			"width": 1167.4072265625,
			"height": 1547.8993097162113,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1j",
			"roundness": null,
			"seed": 989088967,
			"version": 70,
			"versionNonce": 141933929,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503488743,
			"link": null,
			"locked": false,
			"text": "const Post = require(\"../models/post\");\nconst { generateToken } = require(\"../lib/token\");\n\nasync function getAllPosts(req, res) {\n  const posts = await Post.find();\n  const token = generateToken(req.user_id);\n  res.status(200).json({ posts: posts, token: token });\n}\n// Previous createPost function: \n// async function createPost(req, res) {\n//   const post = new Post(req.body);\n//   post.save();\n//   const newToken = generateToken(req.user_id);\n//   res.status(201).json({ message: \"Post created\", token: newToken });\n// }\n\n//Updated createPost function:\nasync function createPost(req, res) {\n  try {\n    const post = new Post({\n      message: req.body.message,\n      author: req.user_id,   // get from middleware, not client input\n      createdAt: new Date()\n    });\n    await post.save();\n\n    const newToken = generateToken(req.user_id);\n    res.status(201).json({ message: \"Post created\", token: newToken });\n  } catch (error) {\n    console.error(\"Error creating post:\", error);\n    res.status(400).json({ message: \"Failed to create post\" });\n  }\n}\n\n\nconst PostsController = {\n  getAllPosts: getAllPosts,\n  createPost: createPost,\n};\n\nmodule.exports = PostsController;\n",
			"rawText": "const Post = require(\"../models/post\");\nconst { generateToken } = require(\"../lib/token\");\n\nasync function getAllPosts(req, res) {\n  const posts = await Post.find();\n  const token = generateToken(req.user_id);\n  res.status(200).json({ posts: posts, token: token });\n}\n// Previous createPost function: \n// async function createPost(req, res) {\n//   const post = new Post(req.body);\n//   post.save();\n//   const newToken = generateToken(req.user_id);\n//   res.status(201).json({ message: \"Post created\", token: newToken });\n// }\n\n//Updated createPost function:\nasync function createPost(req, res) {\n  try {\n    const post = new Post({\n      message: req.body.message,\n      author: req.user_id,   // get from middleware, not client input\n      createdAt: new Date()\n    });\n    await post.save();\n\n    const newToken = generateToken(req.user_id);\n    res.status(201).json({ message: \"Post created\", token: newToken });\n  } catch (error) {\n    console.error(\"Error creating post:\", error);\n    res.status(400).json({ message: \"Failed to create post\" });\n  }\n}\n\n\nconst PostsController = {\n  getAllPosts: getAllPosts,\n  createPost: createPost,\n};\n\nmodule.exports = PostsController;\n",
			"fontSize": 29.483796375546884,
			"fontFamily": 8,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "const Post = require(\"../models/post\");\nconst { generateToken } = require(\"../lib/token\");\n\nasync function getAllPosts(req, res) {\n  const posts = await Post.find();\n  const token = generateToken(req.user_id);\n  res.status(200).json({ posts: posts, token: token });\n}\n// Previous createPost function: \n// async function createPost(req, res) {\n//   const post = new Post(req.body);\n//   post.save();\n//   const newToken = generateToken(req.user_id);\n//   res.status(201).json({ message: \"Post created\", token: newToken });\n// }\n\n//Updated createPost function:\nasync function createPost(req, res) {\n  try {\n    const post = new Post({\n      message: req.body.message,\n      author: req.user_id,   // get from middleware, not client input\n      createdAt: new Date()\n    });\n    await post.save();\n\n    const newToken = generateToken(req.user_id);\n    res.status(201).json({ message: \"Post created\", token: newToken });\n  } catch (error) {\n    console.error(\"Error creating post:\", error);\n    res.status(400).json({ message: \"Failed to create post\" });\n  }\n}\n\n\nconst PostsController = {\n  getAllPosts: getAllPosts,\n  createPost: createPost,\n};\n\nmodule.exports = PostsController;\n",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "GLZb0TiXnHNGA5hMM4M3j",
			"type": "rectangle",
			"x": 6991.957336484038,
			"y": -136.6609933102592,
			"width": 1357.7257107554688,
			"height": 1612.6925368357875,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1k",
			"roundness": {
				"type": 3
			},
			"seed": 2070988329,
			"version": 88,
			"versionNonce": 1161235625,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755430454538,
			"link": null,
			"locked": false
		},
		{
			"id": "6qgzJuDy",
			"type": "text",
			"x": 7535.92165841126,
			"y": -258.2761472046297,
			"width": 326.73583984375,
			"height": 45,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b1l",
			"roundness": null,
			"seed": 1380450633,
			"version": 157,
			"versionNonce": 418612361,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755430599521,
			"link": null,
			"locked": false,
			"text": "controller/posts.js",
			"rawText": "controller/posts.js",
			"fontSize": 36,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "controller/posts.js",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "qhmdFMiR",
			"type": "text",
			"x": 8422.134722960678,
			"y": -62.11680042234923,
			"width": 1516.423095703125,
			"height": 910,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b26",
			"roundness": null,
			"seed": 959826407,
			"version": 103,
			"versionNonce": 896344423,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "JmyLS2EdaYfSN2utomsAS",
					"type": "arrow"
				}
			],
			"updated": 1755503784338,
			"link": null,
			"locked": false,
			"text": "// 1. Explicitly setting author with req.user_id:\nPreviously, your createPost relied on req.body to contain the author ID, which it probably didn’t. \nSince your Mongoose schema requires author, not providing it caused validation to fail, which likely \ncaused the post creation to error out silently or trigger unexpected behavior like logging you out.\nBy explicitly setting author: req.user_id from the middleware, you guarantee that every post is linked \nto a valid user ID from the authenticated session. This satisfies Mongoose’s validation and creates a \nproper post entry.\n\n// 2. Using tokenChecker middleware ensures authentication and sets req.user_id:\nThe middleware extracts the user ID from the JWT token and attaches it to the request. This means \nreq.user_id is always present and trustworthy (because it’s verified).\nWithout this, req.user_id would be undefined, causing the author to be missing, \nwhich caused the errors you saw.\n\n// 3. Error handling and saving the post properly:\nYour updated code awaits the save, ensuring the post actually gets stored before you respond. \nThis avoids timing issues where the UI might try to show the new post but it isn’t there yet.\n\n\nWhy it fixed the UI not updating immediately:\nSince the post was never successfully saved before (due to validation error), the front end never \ngot the new post data back.\n\nNow, with the post saved properly, the server responds confirming the post creation and sends the new token.\nThis response triggers the front end to refresh posts or update the UI immediately.\n",
			"rawText": "// 1. Explicitly setting author with req.user_id:\nPreviously, your createPost relied on req.body to contain the author ID, which it probably didn’t. \nSince your Mongoose schema requires author, not providing it caused validation to fail, which likely \ncaused the post creation to error out silently or trigger unexpected behavior like logging you out.\nBy explicitly setting author: req.user_id from the middleware, you guarantee that every post is linked \nto a valid user ID from the authenticated session. This satisfies Mongoose’s validation and creates a \nproper post entry.\n\n// 2. Using tokenChecker middleware ensures authentication and sets req.user_id:\nThe middleware extracts the user ID from the JWT token and attaches it to the request. This means \nreq.user_id is always present and trustworthy (because it’s verified).\nWithout this, req.user_id would be undefined, causing the author to be missing, \nwhich caused the errors you saw.\n\n// 3. Error handling and saving the post properly:\nYour updated code awaits the save, ensuring the post actually gets stored before you respond. \nThis avoids timing issues where the UI might try to show the new post but it isn’t there yet.\n\n\nWhy it fixed the UI not updating immediately:\nSince the post was never successfully saved before (due to validation error), the front end never \ngot the new post data back.\n\nNow, with the post saved properly, the server responds confirming the post creation and sends the new token.\nThis response triggers the front end to refresh posts or update the UI immediately.\n",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "// 1. Explicitly setting author with req.user_id:\nPreviously, your createPost relied on req.body to contain the author ID, which it probably didn’t. \nSince your Mongoose schema requires author, not providing it caused validation to fail, which likely \ncaused the post creation to error out silently or trigger unexpected behavior like logging you out.\nBy explicitly setting author: req.user_id from the middleware, you guarantee that every post is linked \nto a valid user ID from the authenticated session. This satisfies Mongoose’s validation and creates a \nproper post entry.\n\n// 2. Using tokenChecker middleware ensures authentication and sets req.user_id:\nThe middleware extracts the user ID from the JWT token and attaches it to the request. This means \nreq.user_id is always present and trustworthy (because it’s verified).\nWithout this, req.user_id would be undefined, causing the author to be missing, \nwhich caused the errors you saw.\n\n// 3. Error handling and saving the post properly:\nYour updated code awaits the save, ensuring the post actually gets stored before you respond. \nThis avoids timing issues where the UI might try to show the new post but it isn’t there yet.\n\n\nWhy it fixed the UI not updating immediately:\nSince the post was never successfully saved before (due to validation error), the front end never \ngot the new post data back.\n\nNow, with the post saved properly, the server responds confirming the post creation and sends the new token.\nThis response triggers the front end to refresh posts or update the UI immediately.\n",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "GTYz13tH",
			"type": "text",
			"x": 10823.90664822916,
			"y": -89.6924828186576,
			"width": 1780.5467529296875,
			"height": 8310.702284955823,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b27",
			"roundness": null,
			"seed": 971712457,
			"version": 88,
			"versionNonce": 2079463721,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755504189341,
			"link": null,
			"locked": false,
			"text": "const request = require(\"supertest\");\nconst JWT = require(\"jsonwebtoken\");\n\nconst app = require(\"../../app\");\nconst Post = require(\"../../models/post\");\nconst User = require(\"../../models/user\");\n\nrequire(\"../mongodb_helper\");\n\nconst secret = process.env.JWT_SECRET;\n\nfunction createToken(userId) {\n  return JWT.sign(\n    {\n      sub: userId,\n      // Backdate this token of 5 minutes\n      iat: Math.floor(Date.now() / 1000) - 5 * 60,\n      // Set the JWT token to expire in 10 minutes\n      exp: Math.floor(Date.now() / 1000) + 10 * 60,\n    },\n    secret\n  );\n}\nlet user; //new line \nlet token;\n\ndescribe(\"/posts\", () => {\n  beforeEach(async () => {\n    await User.deleteMany({});\n    await Post.deleteMany({});\n\n    user = new User({\n      fullname: \"Testy McTest\",\n      email: \"post-test@test.com\",\n      password: \"12345678\",\n    });\n\n    await user.save();\n    token = createToken(user.id);\n  });\n\n\n  describe(\"POST, when a valid token is present\", () => {\n    test(\"responds with a 201\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"Hello World!\" });\n      expect(response.status).toEqual(201);\n    });\n\n    test(\"creates a new post\", async () => {\n      await request(app)\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"Hello World!!\" });\n\n      const posts = await Post.find();\n      expect(posts.length).toEqual(1);\n      expect(posts[0].message).toEqual(\"Hello World!!\");\n    });\n\n    test(\"returns a new token\", async () => {\n      const testApp = request(app);\n      const response = await testApp\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"hello world\" });\n\n      const newToken = response.body.token;\n      const newTokenDecoded = JWT.decode(newToken, process.env.JWT_SECRET);\n      const oldTokenDecoded = JWT.decode(token, process.env.JWT_SECRET);\n\n      // iat stands for issued at\n      expect(newTokenDecoded.iat > oldTokenDecoded.iat).toEqual(true);\n    });\n  });\n\n  describe(\"POST, when token is missing\", () => {\n    test(\"responds with a 401\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      expect(response.status).toEqual(401);\n    });\n\n    test(\"a post is not created\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      const posts = await Post.find();\n      expect(posts.length).toEqual(0);\n    });\n\n    test(\"a token is not returned\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      expect(response.body.token).toEqual(undefined);\n    });\n  });\n\n  describe(\"GET, when token is present\", () => {\n    test(\"the response code is 200\", async () => {\n      const post1 = new Post({ message: \"I love all my children equally\", author: user._id });\n      const post2 = new Post({ message: \"I've never cared for GOB\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      expect(response.status).toEqual(200);\n    });\n\n    test(\"returns every post in the collection\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      const posts = response.body.posts;\n      const firstPost = posts[0];\n      const secondPost = posts[1];\n\n      expect(firstPost.message).toEqual(\"howdy!\");\n      expect(secondPost.message).toEqual(\"hola!\");\n    });\n\n    test(\"returns a new token\", async () => {\n      const post1 = new Post({ message: \"First Post!\", author: user._id });\n      const post2 = new Post({ message: \"Second Post!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      const newToken = response.body.token;\n      const newTokenDecoded = JWT.decode(newToken, process.env.JWT_SECRET);\n      const oldTokenDecoded = JWT.decode(token, process.env.JWT_SECRET);\n\n      // iat stands for issued at\n      expect(newTokenDecoded.iat > oldTokenDecoded.iat).toEqual(true);\n    });\n  });\n\n  describe(\"GET, when token is missing\", () => {\n    test(\"the response code is 401\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.status).toEqual(401);\n    });\n\n    test(\"returns no posts\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.body.posts).toEqual(undefined);\n    });\n\n    test(\"does not return a new token\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.body.token).toEqual(undefined);\n    });\n  });\n});\n\n",
			"rawText": "const request = require(\"supertest\");\nconst JWT = require(\"jsonwebtoken\");\n\nconst app = require(\"../../app\");\nconst Post = require(\"../../models/post\");\nconst User = require(\"../../models/user\");\n\nrequire(\"../mongodb_helper\");\n\nconst secret = process.env.JWT_SECRET;\n\nfunction createToken(userId) {\n  return JWT.sign(\n    {\n      sub: userId,\n      // Backdate this token of 5 minutes\n      iat: Math.floor(Date.now() / 1000) - 5 * 60,\n      // Set the JWT token to expire in 10 minutes\n      exp: Math.floor(Date.now() / 1000) + 10 * 60,\n    },\n    secret\n  );\n}\nlet user; //new line \nlet token;\n\ndescribe(\"/posts\", () => {\n  beforeEach(async () => {\n    await User.deleteMany({});\n    await Post.deleteMany({});\n\n    user = new User({\n      fullname: \"Testy McTest\",\n      email: \"post-test@test.com\",\n      password: \"12345678\",\n    });\n\n    await user.save();\n    token = createToken(user.id);\n  });\n\n\n  describe(\"POST, when a valid token is present\", () => {\n    test(\"responds with a 201\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"Hello World!\" });\n      expect(response.status).toEqual(201);\n    });\n\n    test(\"creates a new post\", async () => {\n      await request(app)\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"Hello World!!\" });\n\n      const posts = await Post.find();\n      expect(posts.length).toEqual(1);\n      expect(posts[0].message).toEqual(\"Hello World!!\");\n    });\n\n    test(\"returns a new token\", async () => {\n      const testApp = request(app);\n      const response = await testApp\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"hello world\" });\n\n      const newToken = response.body.token;\n      const newTokenDecoded = JWT.decode(newToken, process.env.JWT_SECRET);\n      const oldTokenDecoded = JWT.decode(token, process.env.JWT_SECRET);\n\n      // iat stands for issued at\n      expect(newTokenDecoded.iat > oldTokenDecoded.iat).toEqual(true);\n    });\n  });\n\n  describe(\"POST, when token is missing\", () => {\n    test(\"responds with a 401\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      expect(response.status).toEqual(401);\n    });\n\n    test(\"a post is not created\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      const posts = await Post.find();\n      expect(posts.length).toEqual(0);\n    });\n\n    test(\"a token is not returned\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      expect(response.body.token).toEqual(undefined);\n    });\n  });\n\n  describe(\"GET, when token is present\", () => {\n    test(\"the response code is 200\", async () => {\n      const post1 = new Post({ message: \"I love all my children equally\", author: user._id });\n      const post2 = new Post({ message: \"I've never cared for GOB\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      expect(response.status).toEqual(200);\n    });\n\n    test(\"returns every post in the collection\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      const posts = response.body.posts;\n      const firstPost = posts[0];\n      const secondPost = posts[1];\n\n      expect(firstPost.message).toEqual(\"howdy!\");\n      expect(secondPost.message).toEqual(\"hola!\");\n    });\n\n    test(\"returns a new token\", async () => {\n      const post1 = new Post({ message: \"First Post!\", author: user._id });\n      const post2 = new Post({ message: \"Second Post!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      const newToken = response.body.token;\n      const newTokenDecoded = JWT.decode(newToken, process.env.JWT_SECRET);\n      const oldTokenDecoded = JWT.decode(token, process.env.JWT_SECRET);\n\n      // iat stands for issued at\n      expect(newTokenDecoded.iat > oldTokenDecoded.iat).toEqual(true);\n    });\n  });\n\n  describe(\"GET, when token is missing\", () => {\n    test(\"the response code is 401\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.status).toEqual(401);\n    });\n\n    test(\"returns no posts\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.body.posts).toEqual(undefined);\n    });\n\n    test(\"does not return a new token\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.body.token).toEqual(undefined);\n    });\n  });\n});\n\n",
			"fontSize": 34.4485068806459,
			"fontFamily": 8,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "const request = require(\"supertest\");\nconst JWT = require(\"jsonwebtoken\");\n\nconst app = require(\"../../app\");\nconst Post = require(\"../../models/post\");\nconst User = require(\"../../models/user\");\n\nrequire(\"../mongodb_helper\");\n\nconst secret = process.env.JWT_SECRET;\n\nfunction createToken(userId) {\n  return JWT.sign(\n    {\n      sub: userId,\n      // Backdate this token of 5 minutes\n      iat: Math.floor(Date.now() / 1000) - 5 * 60,\n      // Set the JWT token to expire in 10 minutes\n      exp: Math.floor(Date.now() / 1000) + 10 * 60,\n    },\n    secret\n  );\n}\nlet user; //new line \nlet token;\n\ndescribe(\"/posts\", () => {\n  beforeEach(async () => {\n    await User.deleteMany({});\n    await Post.deleteMany({});\n\n    user = new User({\n      fullname: \"Testy McTest\",\n      email: \"post-test@test.com\",\n      password: \"12345678\",\n    });\n\n    await user.save();\n    token = createToken(user.id);\n  });\n\n\n  describe(\"POST, when a valid token is present\", () => {\n    test(\"responds with a 201\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"Hello World!\" });\n      expect(response.status).toEqual(201);\n    });\n\n    test(\"creates a new post\", async () => {\n      await request(app)\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"Hello World!!\" });\n\n      const posts = await Post.find();\n      expect(posts.length).toEqual(1);\n      expect(posts[0].message).toEqual(\"Hello World!!\");\n    });\n\n    test(\"returns a new token\", async () => {\n      const testApp = request(app);\n      const response = await testApp\n        .post(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`)\n        .send({ message: \"hello world\" });\n\n      const newToken = response.body.token;\n      const newTokenDecoded = JWT.decode(newToken, process.env.JWT_SECRET);\n      const oldTokenDecoded = JWT.decode(token, process.env.JWT_SECRET);\n\n      // iat stands for issued at\n      expect(newTokenDecoded.iat > oldTokenDecoded.iat).toEqual(true);\n    });\n  });\n\n  describe(\"POST, when token is missing\", () => {\n    test(\"responds with a 401\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      expect(response.status).toEqual(401);\n    });\n\n    test(\"a post is not created\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      const posts = await Post.find();\n      expect(posts.length).toEqual(0);\n    });\n\n    test(\"a token is not returned\", async () => {\n      const response = await request(app)\n        .post(\"/posts\")\n        .send({ message: \"hello again world\" });\n\n      expect(response.body.token).toEqual(undefined);\n    });\n  });\n\n  describe(\"GET, when token is present\", () => {\n    test(\"the response code is 200\", async () => {\n      const post1 = new Post({ message: \"I love all my children equally\", author: user._id });\n      const post2 = new Post({ message: \"I've never cared for GOB\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      expect(response.status).toEqual(200);\n    });\n\n    test(\"returns every post in the collection\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      const posts = response.body.posts;\n      const firstPost = posts[0];\n      const secondPost = posts[1];\n\n      expect(firstPost.message).toEqual(\"howdy!\");\n      expect(secondPost.message).toEqual(\"hola!\");\n    });\n\n    test(\"returns a new token\", async () => {\n      const post1 = new Post({ message: \"First Post!\", author: user._id });\n      const post2 = new Post({ message: \"Second Post!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app)\n        .get(\"/posts\")\n        .set(\"Authorization\", `Bearer ${token}`);\n\n      const newToken = response.body.token;\n      const newTokenDecoded = JWT.decode(newToken, process.env.JWT_SECRET);\n      const oldTokenDecoded = JWT.decode(token, process.env.JWT_SECRET);\n\n      // iat stands for issued at\n      expect(newTokenDecoded.iat > oldTokenDecoded.iat).toEqual(true);\n    });\n  });\n\n  describe(\"GET, when token is missing\", () => {\n    test(\"the response code is 401\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.status).toEqual(401);\n    });\n\n    test(\"returns no posts\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.body.posts).toEqual(undefined);\n    });\n\n    test(\"does not return a new token\", async () => {\n      const post1 = new Post({ message: \"howdy!\", author: user._id });\n      const post2 = new Post({ message: \"hola!\", author: user._id });\n      await post1.save();\n      await post2.save();\n\n      const response = await request(app).get(\"/posts\");\n\n      expect(response.body.token).toEqual(undefined);\n    });\n  });\n});\n\n",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "8g3y-1yOSuSKjOimkbg-z",
			"type": "rectangle",
			"x": 10736.9728891873,
			"y": -143.35714424967614,
			"width": 1890.8429657040663,
			"height": 8495.502146726132,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b28",
			"roundness": {
				"type": 3
			},
			"seed": 424363721,
			"version": 297,
			"versionNonce": 1412466089,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503799810,
			"link": null,
			"locked": false
		},
		{
			"id": "oEN0mvME",
			"type": "text",
			"x": 11403.200564261208,
			"y": -222.32317475548172,
			"width": 395.7478332519531,
			"height": 45,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b29",
			"roundness": null,
			"seed": 220425927,
			"version": 359,
			"versionNonce": 1686770249,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755502958228,
			"link": null,
			"locked": false,
			"text": "controller/post.test.js",
			"rawText": "controller/post.test.js",
			"fontSize": 36,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "controller/post.test.js",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "Qd7QWATn",
			"type": "text",
			"x": 10068.650121277175,
			"y": -271.69044751492373,
			"width": 444.49981689453125,
			"height": 70,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2A",
			"roundness": null,
			"seed": 699011271,
			"version": 89,
			"versionNonce": 1212506889,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755430696104,
			"link": null,
			"locked": false,
			"text": "Ran the backend tests and got \nvalidation errors ",
			"rawText": "Ran the backend tests and got \nvalidation errors ",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Ran the backend tests and got \nvalidation errors ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "WsZdNjqx8wfSorHvguVi4",
			"type": "arrow",
			"x": 10127.936483521406,
			"y": -151.04466692629285,
			"width": 496.1299379394695,
			"height": 7.520200538552217,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2B",
			"roundness": {
				"type": 2
			},
			"seed": 1038062887,
			"version": 35,
			"versionNonce": 1756660137,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755430699105,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					496.1299379394695,
					7.520200538552217
				]
			],
			"lastCommittedPoint": null,
			"startBinding": null,
			"endBinding": null,
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "EH76HgYa",
			"type": "text",
			"x": 11133.403269486176,
			"y": -321.46061120487366,
			"width": 1121.2877197265625,
			"height": 35,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2C",
			"roundness": null,
			"seed": 624874505,
			"version": 159,
			"versionNonce": 498034057,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755506127876,
			"link": null,
			"locked": false,
			"text": "This was failing tests because I wasn't passing author into the expected result. ",
			"rawText": "This was failing tests because I wasn't passing author into the expected result. ",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "This was failing tests because I wasn't passing author into the expected result. ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "krj4XpV2",
			"type": "text",
			"x": 12696.380954800903,
			"y": -83.80867213300496,
			"width": 766.3037719726562,
			"height": 105,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [
				"TzUH1d7kgZmCJaHCVLa0H"
			],
			"frameId": null,
			"index": "b2CV",
			"roundness": null,
			"seed": 836070215,
			"version": 167,
			"versionNonce": 1272180809,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755506125710,
			"link": null,
			"locked": false,
			"text": "You already create a User in beforeAll(), but then you're\ndeleting all users in afterEach(). This breaks things\nbecause:",
			"rawText": "You already create a User in beforeAll(), but then you're deleting all users in afterEach(). This breaks things because:",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "You already create a User in beforeAll(), but then you're deleting all users in afterEach(). This breaks things because:",
			"autoResize": false,
			"lineHeight": 1.25
		},
		{
			"id": "D9L04iYx",
			"type": "text",
			"x": 12723.48481367178,
			"y": 47.60383298134627,
			"width": 498.7637939453125,
			"height": 35,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [
				"TzUH1d7kgZmCJaHCVLa0H"
			],
			"frameId": null,
			"index": "b2D",
			"roundness": null,
			"seed": 285151401,
			"version": 182,
			"versionNonce": 643890985,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755506125710,
			"link": null,
			"locked": false,
			"text": "- token remains (from beforeAll), but",
			"rawText": "- token remains (from beforeAll), but",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "- token remains (from beforeAll), but",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "NBJzjSQk",
			"type": "text",
			"x": 12723.868940681392,
			"y": 100.85270066909982,
			"width": 771.3997802734375,
			"height": 70,
			"angle": 0,
			"strokeColor": "#1e1e1e",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [
				"TzUH1d7kgZmCJaHCVLa0H"
			],
			"frameId": null,
			"index": "b2E",
			"roundness": null,
			"seed": 1320577639,
			"version": 250,
			"versionNonce": 237580809,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755506125710,
			"link": null,
			"locked": false,
			"text": "- the user it references gets deleted after the first\ntest runs",
			"rawText": "- the user it references gets deleted after the first test runs",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "- the user it references gets deleted after the first test runs",
			"autoResize": false,
			"lineHeight": 1.25
		},
		{
			"id": "CpLRlVWY2_zVWdQQ0x6VB",
			"type": "ellipse",
			"x": 11711.08870184383,
			"y": 6845.508818420123,
			"width": 433.186633266494,
			"height": 163.97714397943946,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2G",
			"roundness": {
				"type": 2
			},
			"seed": 1684187497,
			"version": 102,
			"versionNonce": 58379337,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503050643,
			"link": null,
			"locked": false
		},
		{
			"id": "pl2FxTNKWP8E62MN_FVbb",
			"type": "ellipse",
			"x": 11504.475076311024,
			"y": 7251.138244030313,
			"width": 677.4914416054344,
			"height": 277.78541283958566,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2H",
			"roundness": {
				"type": 2
			},
			"seed": 1226377191,
			"version": 38,
			"versionNonce": 1176284999,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503056776,
			"link": null,
			"locked": false
		},
		{
			"id": "e39g6r1MIS32MiTYQJDoX",
			"type": "ellipse",
			"x": 11513.424999851808,
			"y": 7770.125201281919,
			"width": 647.513012591975,
			"height": 205.09396386328535,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2I",
			"roundness": {
				"type": 2
			},
			"seed": 1635069543,
			"version": 98,
			"versionNonce": 1707489609,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503062661,
			"link": null,
			"locked": false
		},
		{
			"id": "44yTyTnrgZxBK7GBkEKHi",
			"type": "rectangle",
			"x": 7016.580281254171,
			"y": 198.5404709647634,
			"width": 1202.490128965167,
			"height": 290.9482293186189,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2J",
			"roundness": {
				"type": 3
			},
			"seed": 846640551,
			"version": 87,
			"versionNonce": 1723373545,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503469610,
			"link": null,
			"locked": false
		},
		{
			"id": "dg3B4zp4",
			"type": "text",
			"x": 7406.238333019065,
			"y": 169.09897589470876,
			"width": 401.74383544921875,
			"height": 35,
			"angle": 0,
			"strokeColor": "#2f9e44",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2K",
			"roundness": null,
			"seed": 965718729,
			"version": 114,
			"versionNonce": 1721632231,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503505193,
			"link": null,
			"locked": false,
			"text": "Previous createPost function",
			"rawText": "Previous createPost function",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Previous createPost function",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "qxMDuYBY8H3BptmtqZPjJ",
			"type": "rectangle",
			"x": 7019.127977779082,
			"y": 505.3664215258598,
			"width": 1220.268689242801,
			"height": 652.7618559978091,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2L",
			"roundness": {
				"type": 3
			},
			"seed": 1783772969,
			"version": 154,
			"versionNonce": 2064514185,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503502493,
			"link": null,
			"locked": false
		},
		{
			"id": "fkp8bKuV",
			"type": "text",
			"x": 7700.800322414508,
			"y": 524.5143790067773,
			"width": 403.31182861328125,
			"height": 35,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2M",
			"roundness": null,
			"seed": 2139308489,
			"version": 261,
			"versionNonce": 1708294697,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755503523502,
			"link": null,
			"locked": false,
			"text": "Updated createPost function",
			"rawText": "Updated createPost function",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Updated createPost function",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "sOmV_Sy6GuaOJCjEo5Vvj",
			"type": "rectangle",
			"x": 7137.875656465592,
			"y": 693.1174875758218,
			"width": 332.06821648040204,
			"height": 31.700809339967464,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2N",
			"roundness": {
				"type": 3
			},
			"seed": 32757417,
			"version": 90,
			"versionNonce": 622841865,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503633894,
			"link": null,
			"locked": false
		},
		{
			"id": "vWflB9jbJ8YK0vkF9Oapd",
			"type": "rectangle",
			"x": 7096.023381365152,
			"y": 797.7404186063984,
			"width": 310.8926870313544,
			"height": 40.34088053400228,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2O",
			"roundness": {
				"type": 3
			},
			"seed": 1922754281,
			"version": 78,
			"versionNonce": 400994377,
			"isDeleted": false,
			"boundElements": [
				{
					"id": "JmyLS2EdaYfSN2utomsAS",
					"type": "arrow"
				}
			],
			"updated": 1755503705144,
			"link": null,
			"locked": false
		},
		{
			"id": "JmyLS2EdaYfSN2utomsAS",
			"type": "arrow",
			"x": 7411.782950570446,
			"y": 805.230152229726,
			"width": 992.9426524207547,
			"height": 294.9510512083443,
			"angle": 0,
			"strokeColor": "#1971c2",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2P",
			"roundness": {
				"type": 2
			},
			"seed": 9716391,
			"version": 114,
			"versionNonce": 1591149127,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503717431,
			"link": null,
			"locked": false,
			"points": [
				[
					0,
					0
				],
				[
					992.9426524207547,
					-294.9510512083443
				]
			],
			"lastCommittedPoint": [
				993.1194105676614,
				-320.4676569631407
			],
			"startBinding": {
				"elementId": "vWflB9jbJ8YK0vkF9Oapd",
				"focus": 0.5372167515989151,
				"gap": 5.01778344791453
			},
			"endBinding": {
				"elementId": "qhmdFMiR",
				"focus": 0.1655132387603638,
				"gap": 17.409119969477615
			},
			"startArrowhead": null,
			"endArrowhead": "arrow",
			"elbowed": false
		},
		{
			"id": "or4JKCmBsIMpjAov1CPmn",
			"type": "ellipse",
			"x": 12094.848785759905,
			"y": 4604.686866971773,
			"width": 513.8670912054295,
			"height": 242.6529673835521,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2Q",
			"roundness": {
				"type": 2
			},
			"seed": 983553959,
			"version": 54,
			"versionNonce": 105668615,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503811309,
			"link": null,
			"locked": false
		},
		{
			"id": "H-iYqIR90DuA1kfQUmcUq",
			"type": "ellipse",
			"x": 11700.407266172131,
			"y": 5179.353563768668,
			"width": 510.93779051978163,
			"height": 257.65020391637245,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2R",
			"roundness": {
				"type": 2
			},
			"seed": 166774567,
			"version": 64,
			"versionNonce": 385837863,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503817059,
			"link": null,
			"locked": false
		},
		{
			"id": "6foK9GZD0ZcqIg3AIOd_5",
			"type": "ellipse",
			"x": 11783.823557672426,
			"y": 5933.232416700647,
			"width": 517.4430788773316,
			"height": 245.78487815502103,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2S",
			"roundness": {
				"type": 2
			},
			"seed": 576024135,
			"version": 51,
			"versionNonce": 614241673,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503824309,
			"link": null,
			"locked": false
		},
		{
			"id": "vqoCfJU1oTVl99xkBq0pM",
			"type": "rectangle",
			"x": 10814.917975323639,
			"y": 897.1980198454705,
			"width": 181.40921185269144,
			"height": 53.16462357947762,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2T",
			"roundness": {
				"type": 3
			},
			"seed": 1097006185,
			"version": 80,
			"versionNonce": 1670668137,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755503839510,
			"link": null,
			"locked": false
		},
		{
			"id": "9q2UyADtdFiR-mzzppD32",
			"type": "rectangle",
			"x": 10846.540893395462,
			"y": 1066.1810008043706,
			"width": 236.91897048464853,
			"height": 48.89520398443369,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2U",
			"roundness": {
				"type": 3
			},
			"seed": 327440457,
			"version": 37,
			"versionNonce": 332609799,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755504077026,
			"link": null,
			"locked": false
		},
		{
			"id": "NTEq9KKU",
			"type": "text",
			"x": 11421.830685593275,
			"y": 1096.8379007529848,
			"width": 521.8078002929688,
			"height": 35,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2V",
			"roundness": null,
			"seed": 1395949607,
			"version": 147,
			"versionNonce": 1612786119,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755504095058,
			"link": null,
			"locked": false,
			"text": "Changed from beforeAll to beforeEach",
			"rawText": "Changed from beforeAll to beforeEach",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Changed from beforeAll to beforeEach",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "IyYR5Vpj",
			"type": "text",
			"x": 11593.901763368223,
			"y": 1550.7137712886192,
			"width": 266.8958740234375,
			"height": 35,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2W",
			"roundness": null,
			"seed": 915981289,
			"version": 250,
			"versionNonce": 747999177,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755504184189,
			"link": null,
			"locked": false,
			"text": "Removed afterEach",
			"rawText": "Removed afterEach",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "Removed afterEach",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "VJjaYGaf",
			"type": "text",
			"x": 11472.552199363856,
			"y": 1163.6345062216785,
			"width": 1133.1876220703125,
			"height": 140,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2X",
			"roundness": null,
			"seed": 1019474345,
			"version": 590,
			"versionNonce": 2131598857,
			"isDeleted": false,
			"boundElements": [],
			"updated": 1755504260008,
			"link": null,
			"locked": false,
			"text": "The issue previously was that we were using deleteMany in afterEach, which meant\nthat we were deleting all users in afterEach(). This broke things because:\n- token remains (from beforeAll), but: \n- the user it references gets deleted after the first time it runs ",
			"rawText": "The issue previously was that we were using deleteMany in afterEach, which meant\nthat we were deleting all users in afterEach(). This broke things because:\n- token remains (from beforeAll), but: \n- the user it references gets deleted after the first time it runs ",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "The issue previously was that we were using deleteMany in afterEach, which meant\nthat we were deleting all users in afterEach(). This broke things because:\n- token remains (from beforeAll), but: \n- the user it references gets deleted after the first time it runs ",
			"autoResize": true,
			"lineHeight": 1.25
		},
		{
			"id": "ilJax44U",
			"type": "text",
			"x": 10296.095889075481,
			"y": 987.6495329864697,
			"width": 386.51190185546875,
			"height": 245,
			"angle": 0,
			"strokeColor": "#e03131",
			"backgroundColor": "transparent",
			"fillStyle": "solid",
			"strokeWidth": 2,
			"strokeStyle": "solid",
			"roughness": 1,
			"opacity": 100,
			"groupIds": [],
			"frameId": null,
			"index": "b2Y",
			"roundness": null,
			"seed": 1638442887,
			"version": 144,
			"versionNonce": 809831593,
			"isDeleted": false,
			"boundElements": null,
			"updated": 1755504334558,
			"link": null,
			"locked": false,
			"text": "beforeEach: \n- Runs before every single \ntest in a test suite \n\nbeforeAll: \n- Runs once before all tests\nin a test suite ",
			"rawText": "beforeEach: \n- Runs before every single \ntest in a test suite \n\nbeforeAll: \n- Runs once before all tests\nin a test suite ",
			"fontSize": 28,
			"fontFamily": 5,
			"textAlign": "left",
			"verticalAlign": "top",
			"containerId": null,
			"originalText": "beforeEach: \n- Runs before every single \ntest in a test suite \n\nbeforeAll: \n- Runs once before all tests\nin a test suite ",
			"autoResize": true,
			"lineHeight": 1.25
		}
	],
	"appState": {
		"theme": "light",
		"viewBackgroundColor": "#ffffff",
		"currentItemStrokeColor": "#e03131",
		"currentItemBackgroundColor": "transparent",
		"currentItemFillStyle": "solid",
		"currentItemStrokeWidth": 2,
		"currentItemStrokeStyle": "solid",
		"currentItemRoughness": 1,
		"currentItemOpacity": 100,
		"currentItemFontFamily": 5,
		"currentItemFontSize": 28,
		"currentItemTextAlign": "left",
		"currentItemStartArrowhead": null,
		"currentItemEndArrowhead": "arrow",
		"currentItemArrowType": "round",
		"scrollX": 3238.7561944992935,
		"scrollY": 3618.2459562448184,
		"zoom": {
			"value": 0.1
		},
		"currentItemRoundness": "round",
		"gridSize": 20,
		"gridStep": 5,
		"gridModeEnabled": false,
		"gridColor": {
			"Bold": "rgba(217, 217, 217, 0.5)",
			"Regular": "rgba(230, 230, 230, 0.5)"
		},
		"currentStrokeOptions": null,
		"frameRendering": {
			"enabled": true,
			"clip": true,
			"name": true,
			"outline": true
		},
		"objectsSnapModeEnabled": false,
		"activeTool": {
			"type": "selection",
			"customType": null,
			"locked": false,
			"fromSelection": false,
			"lastActiveTool": null
		}
	},
	"prevTextMode": "parsed",
	"files": {}
}